// Created by Microsoft (R) C/C++ Compiler Version 14.14.26430.0 (3bed6aa7).
//
// c:\users\imgyu\documents\00_macro\02_transcat_part_api(c#)\translator_catia\cppwithcsharp\release\transcad.tlh
//
// C++ source equivalent of Win32 type library C:\\Program Files (x86)\\MACRO\\TransCAD\\TransCAD.exe
// compiler-generated file created 06/29/18 at 00:13:58 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace TransCAD {

//
// Forward references and typedefs
//

struct __declspec(uuid("dc31ca13-34ca-4d11-a678-58e9fce42872"))
/* LIBID */ __TransCAD;
struct /* coclass */ Application;
struct __declspec(uuid("19487fb9-54f2-49a6-9dae-fd9addd12a76"))
/* dual interface */ IApplication;
struct __declspec(uuid("bc5f8ab3-0439-4f12-af08-8f7d74928940"))
/* dual interface */ IDoc;
struct __declspec(uuid("c12fb0da-8bb2-4cf4-bc4f-7d538ba36727"))
/* dual interface */ IDocs;
struct __declspec(uuid("c37f3bc0-22dd-4e20-a203-286ace862758"))
/* dual interface */ IPartDocument;
struct __declspec(uuid("37ebffcd-077e-4323-83e0-3a8255afb845"))
/* dual interface */ IPart;
struct __declspec(uuid("8084c085-5f3f-49f0-b82c-2276f12c88ab"))
/* dual interface */ IFeatures;
struct __declspec(uuid("f898093c-1b98-420d-b097-c2f1e88ca345"))
/* dual interface */ IFeature;
enum FeatureType;
struct __declspec(uuid("a0cdfcd7-c97b-426f-8528-0aa0321ea0fa"))
/* dual interface */ IReference;
enum ReferenceType;
struct __declspec(uuid("54a6f7f9-5c98-4c65-96d5-bd43d248b788"))
/* dual interface */ IStdSketchFeature;
struct __declspec(uuid("1804c402-fbaf-438f-b849-ab6940606e6d"))
/* dual interface */ IStdSketchOrigin;
struct __declspec(uuid("5a732443-2a35-4519-9c1a-5c9e25342d22"))
/* dual interface */ IStdSketchHDirection;
struct __declspec(uuid("1c5fdd6c-3075-4a54-9e08-d959769c24c6"))
/* dual interface */ IStdSketchVDirection;
struct __declspec(uuid("7ffe9084-7c7b-4e75-abf6-c21a1281e279"))
/* dual interface */ IStdSketchGeometries;
struct __declspec(uuid("882df9bc-ff59-4e65-8e7b-0bcad3d4150f"))
/* dual interface */ IStdSketchGeometry;
enum StdSketchGeometryType;
struct __declspec(uuid("82dd5568-c7f7-4647-b815-66d4e72d5738"))
/* dual interface */ IStdSketchConstraints;
struct __declspec(uuid("23057881-19b6-4395-9d39-b5b62f75b5ef"))
/* dual interface */ IStdSketchConstraint;
enum StdSketchConstraintType;
struct __declspec(uuid("0235d6ab-e6f9-4665-98af-75b7d56a0129"))
/* dual interface */ ISketch;
struct __declspec(uuid("86e4ff07-1f31-42ad-a922-315c8dd57943"))
/* dual interface */ IExplicitModelObject;
enum ExplicitModelObjectType;
struct __declspec(uuid("57fae9e3-f8d4-49b2-ab0a-b88f640b7cf2"))
/* dual interface */ ISketchEditor;
struct __declspec(uuid("ee1eb2ea-dfa3-42a5-a9cb-321fc40b04dc"))
/* dual interface */ IStdSketchLine;
struct __declspec(uuid("3966e6f5-ec21-413e-b0ea-af5077205967"))
/* dual interface */ IStdSketchControlPoint;
struct __declspec(uuid("c10c6fdd-8b99-4449-82f1-eae67407ce67"))
/* dual interface */ IStdSketchCircle;
struct __declspec(uuid("ef6bf49c-742c-4c57-8a37-cecfe279db97"))
/* dual interface */ IStdSketchCircularArc;
enum StdCoincidentSamePointsType;
struct __declspec(uuid("16103c6e-b6d1-4f7c-bda8-e6cf5112accd"))
/* dual interface */ IStdSketchCoincidentSamePoints;
struct __declspec(uuid("ff3a0bdd-1aa5-48fa-9f40-228a00c64a47"))
/* dual interface */ IStdSketchPerpendicular;
struct __declspec(uuid("aba27711-124a-47c3-bb88-3d2703f87984"))
/* dual interface */ IStdSketchParallel;
struct __declspec(uuid("3c500269-634e-4018-9598-916c7035ccaa"))
/* dual interface */ IStdSketchHorizontal;
struct __declspec(uuid("07f4ba82-aa63-4c00-b640-0d00044fb2dc"))
/* dual interface */ IStdSketchVertical;
enum StdExtrudeEndType;
struct __declspec(uuid("570069a3-ac18-40e5-9cd4-be1ecf8318e2"))
/* dual interface */ IStdSolidProtrusionExtrudeFeature;
struct __declspec(uuid("8645e5ad-94df-48a8-ad8e-9ed717ac4691"))
/* dual interface */ IStdSolidCutExtrudeFeature;
struct __declspec(uuid("2a7e4fcc-4df6-4e4f-81f8-80c048316156"))
/* dual interface */ IReferences;
enum PropagationType;
struct __declspec(uuid("7813d4f8-1398-4a75-8fea-af3a262a9898"))
/* dual interface */ IStdSolidFilletConstantFeature;
struct __declspec(uuid("7397f21a-e19f-4eda-b89f-e18405bd3760"))
/* dual interface */ IStdSolidChamferFeature;
enum ChamferType;
struct __declspec(uuid("62f39890-0584-4142-a8de-e419f9bf7301"))
/* dual interface */ IStdSolidProtrusionSweepFeature;
enum StdRevolveEndType;
struct __declspec(uuid("b8aac9d3-8453-48c9-ac93-a116e891101e"))
/* dual interface */ IStdSolidProtrusionRevolveFeature;
struct __declspec(uuid("1b8e8e40-7d68-4387-a13f-d8e204212607"))
/* dual interface */ IStdSolidCutRevolveFeature;
struct __declspec(uuid("929007fb-0ff4-477a-bc6b-9db63b4f6407"))
/* dual interface */ IStdSolidOperatePatternRectangularFeature;
struct __declspec(uuid("1b44e76f-21ad-482b-a2d4-950375ec2d61"))
/* dual interface */ IStdSolidOperatePatternCircularFeature;
struct __declspec(uuid("5089ae2e-41c5-4dd3-bffa-6b5ecff99141"))
/* dual interface */ IStdSolidHoleCounterboredFeature;
struct __declspec(uuid("9980b5be-2421-46dc-9425-84588082dd28"))
/* dual interface */ IStdSolidHoleCountersunkFeature;
struct __declspec(uuid("5a9fb9f5-92a5-4e46-b5a5-d9c163a1fd8c"))
/* dual interface */ IStdDatumPlaneOffsetFeature;
struct __declspec(uuid("b1a7fe7f-54bf-4ce5-8947-831358c38d56"))
/* dual interface */ IStdSolidLoftFacesFeature;
struct __declspec(uuid("09be8c17-db20-4474-8be9-f4d94e27261a"))
/* dual interface */ IStdSolidLoftSectionsFeature;
struct __declspec(uuid("cf090569-05d8-44a0-8656-82bdfe1b79a6"))
/* dual interface */ IStdSolidCutSweepFeature;
struct __declspec(uuid("fccf7496-9645-4b6d-9c4d-067d3d1d60af"))
/* dual interface */ IStdSolidHoleSimpleFeature;
struct __declspec(uuid("66548701-6acc-4271-98a8-d7666930ff05"))
/* dual interface */ IStdSolidShellFeature;
struct __declspec(uuid("ea1585e2-4e46-44e1-808b-4432b9896e2d"))
/* dual interface */ IStdSolidRevolveWithExternalAxisFeature;
struct __declspec(uuid("2ac4b8da-f372-4214-89f7-ab6231e94691"))
/* dual interface */ IStdSolidDraftFeature;
struct __declspec(uuid("b7a36313-ca66-4a4b-83be-b797fb0de80a"))
/* dual interface */ IStdSolidOffsetFeature;
struct __declspec(uuid("378eba37-1568-40e9-bd72-ea48ed471edc"))
/* dual interface */ IStdSolidImportedBrepFeature;
struct __declspec(uuid("280df2d0-be2a-448c-bbce-11814636c4c8"))
/* dual interface */ ISolid;
struct __declspec(uuid("3c5c1ab1-afe7-43b3-874b-d76d77909018"))
/* dual interface */ IFaces;
struct __declspec(uuid("2439d908-0c5b-47e0-890e-46c20b9f1897"))
/* dual interface */ IFace;
enum FaceType;
struct __declspec(uuid("9e0256d6-3731-41c9-997b-245ff562e829"))
/* dual interface */ IEdges;
struct __declspec(uuid("d54bd7b3-4ae1-4b8e-8925-a92a223ef614"))
/* dual interface */ IEdge;
enum EdgeType;
struct __declspec(uuid("0ea073cc-3c4a-48ea-9799-3c818d8107a6"))
/* dual interface */ IVertex;
struct __declspec(uuid("ac5c4dc7-e3a7-4978-97e0-e4f2db1226ef"))
/* dual interface */ IVertices;
struct __declspec(uuid("1ee2b408-02ce-4e5f-bffc-b793bac322c1"))
/* dual interface */ IAssemDocument;
struct __declspec(uuid("ad55f898-5cf6-4d13-97db-feab1156626f"))
/* dual interface */ IAssem;
struct __declspec(uuid("47b8d6ab-475c-4102-af1a-6962a7796c3a"))
/* dual interface */ IComp;
struct __declspec(uuid("4ab8ed74-3b2f-47ab-b081-d676c2c45ae8"))
/* dual interface */ IStdAssemConstraints;
struct __declspec(uuid("0861dbf0-310a-4f63-bb23-dc9c37341155"))
/* dual interface */ IStdAssemConstraint;
enum StdAssemblyConstraintType;
struct __declspec(uuid("f5074ba1-513a-4f33-9091-cc8cf56daab1"))
/* dual interface */ IStdAssemConstraintCoaxial;
enum StdAssemblyIncidenceType;
struct __declspec(uuid("449f2c9c-fa8e-43a1-b332-afad30360c60"))
/* dual interface */ IStdAssemConstraintIncidence;
struct /* coclass */ Documents;
struct /* coclass */ Document;
struct /* coclass */ PartDocument;
struct /* coclass */ Part;
struct /* coclass */ Features;
struct /* coclass */ StdDefaultDatumPlaneFeature;
struct __declspec(uuid("f91a93a8-65a9-48dc-a44f-bdd01cbef588"))
/* dual interface */ IStdDefaultDatumPlaneFeature;
struct /* coclass */ StdSketchFeature;
struct /* coclass */ StdSolidProtrusionExtrudeFeature;
struct /* coclass */ StdSolidCutExtrudeFeature;
struct /* coclass */ StdSolidFilletConstantFeature;
struct /* coclass */ StdSketchOrigin;
struct /* coclass */ StdSketchVDirection;
struct /* coclass */ StdSketchHDirection;
struct /* coclass */ StdSketchGeometries;
struct /* coclass */ StdSketchConstraints;
struct /* coclass */ StdSketchGeometry;
struct /* coclass */ StdSketchConstraint;
struct /* coclass */ StdSketchCircle;
struct /* coclass */ StdSketchCircularArc;
struct /* coclass */ StdSketchControlPoint;
struct /* coclass */ StdSketchLine;
struct /* coclass */ References;
struct /* coclass */ Reference;
struct /* coclass */ ExplicitModelObject;
struct /* coclass */ Sketch;
struct /* coclass */ SketchEditor;
struct /* coclass */ StdSolidProtrusionSweepFeature;
struct /* coclass */ StdSolidProtrusionRevolveFeature;
struct /* coclass */ StdSketchCenterline;
struct __declspec(uuid("2600ed0f-883f-478a-afda-a7743a1adf3a"))
/* dual interface */ IStdSketchCenterline;
struct /* coclass */ StdSolidOperatePatternRectangularFeature;
struct /* coclass */ StdSolidChamferFeature;
struct /* coclass */ StdSolidCutRevolveFeature;
struct /* coclass */ StdSolidOperatePatternCircularFeature;
struct /* coclass */ StdSolidHoleCounterboredFeature;
struct /* coclass */ StdSolidHoleCountersunkFeature;
struct /* coclass */ StdSketchCoincidentSamePoints;
struct /* coclass */ StdSketchParallel;
struct /* coclass */ StdSketchPerpendicular;
struct /* coclass */ StdSketchHorizontal;
struct /* coclass */ StdSketchVertical;
struct /* coclass */ StdDatumPlaneOffsetFeature;
struct /* coclass */ AssemDocument;
struct /* coclass */ Assem;
struct /* coclass */ StdSolidLoftFacesFeature;
struct /* coclass */ Component;
struct /* coclass */ StdSolidLoftSectionsFeature;
struct /* coclass */ StdSolidCutSweepFeature;
struct /* coclass */ StdSolidHoleSimpleFeature;
struct /* coclass */ StdSolidShellFeature;
struct /* coclass */ StdSolidRevolveWithExternalAxisFeature;
struct /* coclass */ StdSolidDraftFeature;
struct /* coclass */ StdSolidOffsetFeature;
struct /* coclass */ StdSolidImportedBrepFeature;
struct /* coclass */ Solid;
struct /* coclass */ Faces;
struct /* coclass */ Edges;
struct /* coclass */ Face;
struct /* coclass */ Edge;
struct /* coclass */ Vertices;
struct /* coclass */ Vertex;
struct /* coclass */ Point3D;
struct __declspec(uuid("381b3303-9eea-482a-a184-f404c85ab87d"))
/* dual interface */ IPoint3D;
struct /* coclass */ Axis1;
struct __declspec(uuid("f30ad8b9-836e-4869-b5a2-cd7682555719"))
/* dual interface */ IAxis1;
struct /* coclass */ StdAssemConstraints;
struct /* coclass */ StdAssemConstraintCoaxial;
struct /* coclass */ StdAssemConstraintIncidence;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IReference, __uuidof(IReference));
_COM_SMARTPTR_TYPEDEF(IReferences, __uuidof(IReferences));
_COM_SMARTPTR_TYPEDEF(IVertex, __uuidof(IVertex));
_COM_SMARTPTR_TYPEDEF(IEdge, __uuidof(IEdge));
_COM_SMARTPTR_TYPEDEF(IEdges, __uuidof(IEdges));
_COM_SMARTPTR_TYPEDEF(IVertices, __uuidof(IVertices));
_COM_SMARTPTR_TYPEDEF(IFace, __uuidof(IFace));
_COM_SMARTPTR_TYPEDEF(IFaces, __uuidof(IFaces));
_COM_SMARTPTR_TYPEDEF(ISolid, __uuidof(ISolid));
_COM_SMARTPTR_TYPEDEF(IPoint3D, __uuidof(IPoint3D));
_COM_SMARTPTR_TYPEDEF(IAxis1, __uuidof(IAxis1));
_COM_SMARTPTR_TYPEDEF(IApplication, __uuidof(IApplication));
_COM_SMARTPTR_TYPEDEF(IDoc, __uuidof(IDoc));
_COM_SMARTPTR_TYPEDEF(IFeature, __uuidof(IFeature));
_COM_SMARTPTR_TYPEDEF(IExplicitModelObject, __uuidof(IExplicitModelObject));
_COM_SMARTPTR_TYPEDEF(ISketch, __uuidof(ISketch));
_COM_SMARTPTR_TYPEDEF(IStdSolidProtrusionExtrudeFeature, __uuidof(IStdSolidProtrusionExtrudeFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidCutExtrudeFeature, __uuidof(IStdSolidCutExtrudeFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidFilletConstantFeature, __uuidof(IStdSolidFilletConstantFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidChamferFeature, __uuidof(IStdSolidChamferFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidProtrusionSweepFeature, __uuidof(IStdSolidProtrusionSweepFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidProtrusionRevolveFeature, __uuidof(IStdSolidProtrusionRevolveFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidCutRevolveFeature, __uuidof(IStdSolidCutRevolveFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidOperatePatternRectangularFeature, __uuidof(IStdSolidOperatePatternRectangularFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidOperatePatternCircularFeature, __uuidof(IStdSolidOperatePatternCircularFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidHoleCounterboredFeature, __uuidof(IStdSolidHoleCounterboredFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidHoleCountersunkFeature, __uuidof(IStdSolidHoleCountersunkFeature));
_COM_SMARTPTR_TYPEDEF(IStdDatumPlaneOffsetFeature, __uuidof(IStdDatumPlaneOffsetFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidLoftFacesFeature, __uuidof(IStdSolidLoftFacesFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidLoftSectionsFeature, __uuidof(IStdSolidLoftSectionsFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidCutSweepFeature, __uuidof(IStdSolidCutSweepFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidHoleSimpleFeature, __uuidof(IStdSolidHoleSimpleFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidShellFeature, __uuidof(IStdSolidShellFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidRevolveWithExternalAxisFeature, __uuidof(IStdSolidRevolveWithExternalAxisFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidDraftFeature, __uuidof(IStdSolidDraftFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidOffsetFeature, __uuidof(IStdSolidOffsetFeature));
_COM_SMARTPTR_TYPEDEF(IStdSolidImportedBrepFeature, __uuidof(IStdSolidImportedBrepFeature));
_COM_SMARTPTR_TYPEDEF(IStdAssemConstraint, __uuidof(IStdAssemConstraint));
_COM_SMARTPTR_TYPEDEF(IStdDefaultDatumPlaneFeature, __uuidof(IStdDefaultDatumPlaneFeature));
_COM_SMARTPTR_TYPEDEF(IDocs, __uuidof(IDocs));
_COM_SMARTPTR_TYPEDEF(IPartDocument, __uuidof(IPartDocument));
_COM_SMARTPTR_TYPEDEF(IPart, __uuidof(IPart));
_COM_SMARTPTR_TYPEDEF(IComp, __uuidof(IComp));
_COM_SMARTPTR_TYPEDEF(IStdAssemConstraintCoaxial, __uuidof(IStdAssemConstraintCoaxial));
_COM_SMARTPTR_TYPEDEF(IStdAssemConstraintIncidence, __uuidof(IStdAssemConstraintIncidence));
_COM_SMARTPTR_TYPEDEF(IStdAssemConstraints, __uuidof(IStdAssemConstraints));
_COM_SMARTPTR_TYPEDEF(IAssem, __uuidof(IAssem));
_COM_SMARTPTR_TYPEDEF(IAssemDocument, __uuidof(IAssemDocument));
_COM_SMARTPTR_TYPEDEF(IFeatures, __uuidof(IFeatures));
_COM_SMARTPTR_TYPEDEF(IStdSketchFeature, __uuidof(IStdSketchFeature));
_COM_SMARTPTR_TYPEDEF(IStdSketchOrigin, __uuidof(IStdSketchOrigin));
_COM_SMARTPTR_TYPEDEF(IStdSketchHDirection, __uuidof(IStdSketchHDirection));
_COM_SMARTPTR_TYPEDEF(IStdSketchVDirection, __uuidof(IStdSketchVDirection));
_COM_SMARTPTR_TYPEDEF(IStdSketchGeometry, __uuidof(IStdSketchGeometry));
_COM_SMARTPTR_TYPEDEF(IStdSketchGeometries, __uuidof(IStdSketchGeometries));
_COM_SMARTPTR_TYPEDEF(IStdSketchConstraint, __uuidof(IStdSketchConstraint));
_COM_SMARTPTR_TYPEDEF(IStdSketchConstraints, __uuidof(IStdSketchConstraints));
_COM_SMARTPTR_TYPEDEF(IStdSketchControlPoint, __uuidof(IStdSketchControlPoint));
_COM_SMARTPTR_TYPEDEF(IStdSketchLine, __uuidof(IStdSketchLine));
_COM_SMARTPTR_TYPEDEF(IStdSketchCircle, __uuidof(IStdSketchCircle));
_COM_SMARTPTR_TYPEDEF(IStdSketchCircularArc, __uuidof(IStdSketchCircularArc));
_COM_SMARTPTR_TYPEDEF(IStdSketchCoincidentSamePoints, __uuidof(IStdSketchCoincidentSamePoints));
_COM_SMARTPTR_TYPEDEF(IStdSketchPerpendicular, __uuidof(IStdSketchPerpendicular));
_COM_SMARTPTR_TYPEDEF(IStdSketchParallel, __uuidof(IStdSketchParallel));
_COM_SMARTPTR_TYPEDEF(IStdSketchHorizontal, __uuidof(IStdSketchHorizontal));
_COM_SMARTPTR_TYPEDEF(IStdSketchVertical, __uuidof(IStdSketchVertical));
_COM_SMARTPTR_TYPEDEF(ISketchEditor, __uuidof(ISketchEditor));
_COM_SMARTPTR_TYPEDEF(IStdSketchCenterline, __uuidof(IStdSketchCenterline));

//
// Type library items
//

struct __declspec(uuid("d83a9111-5458-42c6-b99d-836e42e21b45"))
Application;
    // [ default ] interface IApplication

enum FeatureType
{
    StdDefaultDatumPlaneFeature = 0,
    StdSketchFeature = 1,
    StdSolidProtrusionExtrudeFeature = 2,
    StdSolidCutExtrudeFeature = 3,
    StdSolidFilletConstantFeature = 4,
    StdSolidChamferFeature = 5,
    StdSolidProtrusionSweepFeature = 6,
    StdSolidProtrusionRevolveFeature = 7,
    StdSolidCutRevolveFeature = 8,
    StdSolidOperatePatternRectangularFeature = 9,
    StdSolidOperatePatternCircularFeature = 10,
    StdSolidHoleCounterboredFeature = 11,
    StdSolidHoleCountersunkFeature = 12,
    StdDatumPlaneOffsetFeature = 13,
    StdSolidLoftFacesFeature = 14,
    StdSolidLoftSectionsFeature = 15,
    StdSolidCutSweepFeature = 16,
    StdSolidHoleSimpleFeature = 17,
    StdSolidShellFeature = 18,
    StdSolidRevolveWithExternalAxisFeature = 19,
    StdSolidDraftFeature = 20,
    StdSolidOffsetFeature = 21,
    StdSolidImportedBrepFeature = 22,
    StdSolidSphereFeature = 23
};

enum ReferenceType
{
    Feature = 0,
    ExplicitModelObject = 1,
    Brep = 2
};

struct __declspec(uuid("a0cdfcd7-c97b-426f-8528-0aa0321ea0fa"))
IReference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ReferenceType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReferenceeName))
    _bstr_t ReferenceeName;

    //
    // Wrapper methods for error-handling
    //

    enum ReferenceType GetType ( );
    _bstr_t GetName ( );
    _bstr_t GetReferenceeName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ReferenceType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceeName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

enum StdSketchGeometryType
{
    Line = 0,
    Centerline = 1,
    Circle = 2,
    CircularArc = 3,
    ControlPoint = 4
};

enum StdSketchConstraintType
{
    SamePoints = 0,
    Perpendicular = 1,
    Parallel = 2,
    Horizontal = 3,
    Vertical = 4
};

enum ExplicitModelObjectType
{
    Solid = 0,
    DatumPlane = 1,
    Sketch = 2
};

enum StdCoincidentSamePointsType
{
    StartPoint = 0,
    EndPoint = 1,
    CenterPoint = 2,
    Whole = 3
};

enum StdExtrudeEndType
{
    Blind = 0,
    ThroughAll = 1
};

struct __declspec(uuid("2a7e4fcc-4df6-4e4f-81f8-80c048316156"))
IReferences : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IReferencePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IReferencePtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Add (
        struct IReference * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IReference * pVal ) = 0;
};

enum PropagationType
{
    Minimal = 0,
    Tangency = 1
};

enum ChamferType
{
    ChamferType_Length = 0,
    ChamferType_Angle = 1
};

enum StdRevolveEndType
{
    StdRevolveEndType_Blind = 0
};

enum FaceType
{
    FaceType_Plane = 0,
    FaceType_Cylinder = 1,
    FaceType_Cone = 2,
    FaceType_Sphere = 3,
    FaceType_Torus = 4,
    FaceType_Spline = 5
};

enum EdgeType
{
    EdgeType_Line = 0,
    EdgeType_Circle = 1,
    EdgeType_Ellipse = 2,
    EdgeType_Helix = 3,
    EdgeType_Spline = 4
};

struct __declspec(uuid("0ea073cc-3c4a-48ea-9799-3c818d8107a6"))
IVertex : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=Getz))
    double z;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void GetCoordinates (
        double * X,
        double * Y,
        double * z );
    double GetX ( );
    double GetY ( );
    double Getz ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Coordinates (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * X ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * Y ) = 0;
      virtual HRESULT __stdcall get_z (
        /*[out,retval]*/ double * z ) = 0;
};

struct __declspec(uuid("d54bd7b3-4ae1-4b8e-8925-a92a223ef614"))
IEdge : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum EdgeType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetStartPoint))
    IVertexPtr StartPoint;
    __declspec(property(get=GetEndPoint))
    IVertexPtr EndPoint;

    //
    // Wrapper methods for error-handling
    //

    enum EdgeType GetType ( );
    _bstr_t GetName ( );
    IVertexPtr GetStartPoint ( );
    IVertexPtr GetEndPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum EdgeType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ struct IVertex * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IVertex * * ppVal ) = 0;
};

struct __declspec(uuid("9e0256d6-3731-41c9-997b-245ff562e829"))
IEdges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IEdgePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IEdgePtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IEdge * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("ac5c4dc7-e3a7-4978-97e0-e4f2db1226ef"))
IVertices : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVertexPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IVertexPtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IVertex * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("2439d908-0c5b-47e0-890e-46c20b9f1897"))
IFace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum FaceType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEdges))
    IEdgesPtr Edges;
    __declspec(property(get=GetVertices))
    IVerticesPtr Vertices;
    __declspec(property(get=GetArea))
    double Area;

    //
    // Wrapper methods for error-handling
    //

    enum FaceType GetType ( );
    _bstr_t GetName ( );
    IEdgesPtr GetEdges ( );
    IVerticesPtr GetVertices ( );
    void GetCentroid (
        double * cx,
        double * cy,
        double * cz );
    void GetXDirection (
        double * xx,
        double * xy,
        double * xz );
    void GetYDirection (
        double * yx,
        double * yy,
        double * yz );
    void GetZDirection (
        double * zx,
        double * zy,
        double * zz );
    double GetArea ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum FaceType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ struct IEdges * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ struct IVertices * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Centroid (
        /*[out]*/ double * cx,
        /*[out]*/ double * cy,
        /*[out]*/ double * cz ) = 0;
      virtual HRESULT __stdcall get_XDirection (
        /*[out]*/ double * xx,
        /*[out]*/ double * xy,
        /*[out]*/ double * xz ) = 0;
      virtual HRESULT __stdcall get_YDirection (
        /*[out]*/ double * yx,
        /*[out]*/ double * yy,
        /*[out]*/ double * yz ) = 0;
      virtual HRESULT __stdcall get_ZDirection (
        /*[out]*/ double * zx,
        /*[out]*/ double * zy,
        /*[out]*/ double * zz ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("3c5c1ab1-afe7-43b3-874b-d76d77909018"))
IFaces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IFacePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IFacePtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IFace * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("280df2d0-be2a-448c-bbce-11814636c4c8"))
ISolid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFaces))
    IFacesPtr Faces;
    __declspec(property(get=GetEdges))
    IEdgesPtr Edges;
    __declspec(property(get=GetVertices))
    IVerticesPtr Vertices;

    //
    // Wrapper methods for error-handling
    //

    IFacesPtr GetFaces ( );
    IEdgesPtr GetEdges ( );
    IVerticesPtr GetVertices ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ struct IFaces * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ struct IEdges * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ struct IVertices * * ppVal ) = 0;
};

enum StdAssemblyConstraintType
{
    Coaxial = 0,
    Incidence = 1
};

enum StdAssemblyIncidenceType
{
    Opposite = 0,
    Same = 1
};

struct __declspec(uuid("ad3ddb7b-9f0e-4315-b922-79fc0c8ec2ba"))
Documents;
    // [ default ] interface IDocs

struct __declspec(uuid("986b706f-513a-45c5-a943-89a379553504"))
Document;
    // [ default ] interface IDoc

struct __declspec(uuid("d16a646e-c4e2-43eb-888e-39cc59488b5a"))
PartDocument;
    // [ default ] interface IPartDocument

struct __declspec(uuid("de2d5fcb-7160-44ce-a96d-aa43b6975106"))
Part;
    // [ default ] interface IPart

struct __declspec(uuid("606daaf6-d453-4015-845f-7ee235b68dcf"))
Features;
    // [ default ] interface IFeatures

struct __declspec(uuid("f931861e-5fac-491f-9e55-2aa15343bef5"))
StdDefaultDatumPlaneFeature;
    // [ default ] interface IStdDefaultDatumPlaneFeature

struct __declspec(uuid("ffafc9a3-572b-4039-8f79-f012dda8284c"))
StdSketchFeature;
    // [ default ] interface IStdSketchFeature

struct __declspec(uuid("48c7d279-76dc-4a8d-b538-e5dc0546a293"))
StdSolidProtrusionExtrudeFeature;
    // [ default ] interface IStdSolidProtrusionExtrudeFeature

struct __declspec(uuid("f7e0b9e7-f1bd-45bf-9b91-9748a5ca0f3b"))
StdSolidCutExtrudeFeature;
    // [ default ] interface IStdSolidCutExtrudeFeature

struct __declspec(uuid("a73a542c-ca02-49e8-a6a7-7dddd05ea083"))
StdSolidFilletConstantFeature;
    // [ default ] interface IStdSolidFilletConstantFeature

struct __declspec(uuid("21eda72e-5989-461a-9c82-1bbe68990a3d"))
StdSketchOrigin;
    // [ default ] interface IStdSketchOrigin

struct __declspec(uuid("7a4a8e6c-34bc-40ac-ae41-4c72d87a1303"))
StdSketchVDirection;
    // [ default ] interface IStdSketchVDirection

struct __declspec(uuid("09464cc6-18ac-439d-b619-30928ff81d95"))
StdSketchHDirection;
    // [ default ] interface IStdSketchHDirection

struct __declspec(uuid("f8fef672-2f3e-4891-b1c1-d0344659b1b8"))
StdSketchGeometries;
    // [ default ] interface IStdSketchGeometries

struct __declspec(uuid("fe4f1e78-5869-496b-90a1-054a2c82d6b8"))
StdSketchConstraints;
    // [ default ] interface IStdSketchConstraints

struct __declspec(uuid("c8ca998e-7106-4c71-b1ea-8550a478dc0c"))
StdSketchGeometry;
    // [ default ] interface IStdSketchGeometry

struct __declspec(uuid("28c0967e-e8e0-4180-ae84-3af9cf11ef49"))
StdSketchConstraint;
    // [ default ] interface IStdSketchConstraint

struct __declspec(uuid("f24e3b06-eb2a-4c6f-a2fb-d53bdda85f4e"))
StdSketchCircle;
    // [ default ] interface IStdSketchCircle

struct __declspec(uuid("6b2caa3d-d1ff-4da4-ac97-e18a7867df64"))
StdSketchCircularArc;
    // [ default ] interface IStdSketchCircularArc

struct __declspec(uuid("a02b8290-2b16-4e7a-a360-eeec6ddc6700"))
StdSketchControlPoint;
    // [ default ] interface IStdSketchControlPoint

struct __declspec(uuid("9f8963ee-1de4-485e-9b09-e5b376e7c869"))
StdSketchLine;
    // [ default ] interface IStdSketchLine

struct __declspec(uuid("cb55cd74-f19e-4db3-9ff5-bf66b8eea916"))
References;
    // [ default ] interface IReferences

struct __declspec(uuid("b305c600-a038-4f99-9081-18960e273016"))
Reference;
    // [ default ] interface IReference

struct __declspec(uuid("0c575300-d79f-4c2d-ae23-a7d1fd3a0421"))
ExplicitModelObject;
    // [ default ] interface IExplicitModelObject

struct __declspec(uuid("78c8cf8f-48a1-41ad-b47e-ad802059344e"))
Sketch;
    // [ default ] interface ISketch

struct __declspec(uuid("2a4bb0d4-ed3e-43de-bb11-da0ec51aa1a1"))
SketchEditor;
    // [ default ] interface ISketchEditor

struct __declspec(uuid("55a4f80e-6504-47fa-a2c1-309caf002353"))
StdSolidProtrusionSweepFeature;
    // [ default ] interface IStdSolidProtrusionSweepFeature

struct __declspec(uuid("135bb7d6-4978-4580-981f-cbb43287da55"))
StdSolidProtrusionRevolveFeature;
    // [ default ] interface IStdSolidProtrusionRevolveFeature

struct __declspec(uuid("e0e00e33-5799-4e88-8f95-37e4cdf160a8"))
StdSketchCenterline;
    // [ default ] interface IStdSketchCenterline

struct __declspec(uuid("ab178822-57c5-4580-bec4-5a1d28d18a5a"))
StdSolidOperatePatternRectangularFeature;
    // [ default ] interface IStdSolidOperatePatternRectangularFeature

struct __declspec(uuid("119291a7-495d-42bb-b26e-b16bb89c4513"))
StdSolidChamferFeature;
    // [ default ] interface IStdSolidChamferFeature

struct __declspec(uuid("14aa1aef-63f7-4729-9d0b-ed50ab1a9276"))
StdSolidCutRevolveFeature;
    // [ default ] interface IStdSolidCutRevolveFeature

struct __declspec(uuid("9b1c1d69-f475-4e5e-ab2a-b461fb090351"))
StdSolidOperatePatternCircularFeature;
    // [ default ] interface IStdSolidOperatePatternCircularFeature

struct __declspec(uuid("d1d97125-6f20-4315-8ed7-98b7cfebea19"))
StdSolidHoleCounterboredFeature;
    // [ default ] interface IStdSolidHoleCounterboredFeature

struct __declspec(uuid("76d732af-f626-4165-94d6-28a108d5d1b0"))
StdSolidHoleCountersunkFeature;
    // [ default ] interface IStdSolidHoleCountersunkFeature

struct __declspec(uuid("8ef63188-27e0-426a-9706-fd528caaea19"))
StdSketchCoincidentSamePoints;
    // [ default ] interface IStdSketchCoincidentSamePoints

struct __declspec(uuid("cf544838-ada6-46f6-a879-b07ba0cb2da9"))
StdSketchParallel;
    // [ default ] interface IStdSketchParallel

struct __declspec(uuid("634cdb4b-31d1-4f62-b0a0-2accf5310bb5"))
StdSketchPerpendicular;
    // [ default ] interface IStdSketchPerpendicular

struct __declspec(uuid("2026f4d1-3c6d-46a1-b38d-90c3986ba5fa"))
StdSketchHorizontal;
    // [ default ] interface IStdSketchHorizontal

struct __declspec(uuid("88beb2b9-2537-4a26-bf31-f8a4cc8e4eee"))
StdSketchVertical;
    // [ default ] interface IStdSketchVertical

struct __declspec(uuid("2411d4fb-2117-4141-bdbe-4a06aa3f474b"))
StdDatumPlaneOffsetFeature;
    // [ default ] interface IStdDatumPlaneOffsetFeature

struct __declspec(uuid("7d2f6751-2f31-4a5a-8982-8cf15913b1b2"))
AssemDocument;
    // [ default ] interface IAssemDocument

struct __declspec(uuid("69c0835a-52b2-4d48-87d5-4dd526caf20f"))
Assem;
    // [ default ] interface IAssem

struct __declspec(uuid("a2b69c14-a3cb-4a24-8257-6ab09a3229c0"))
StdSolidLoftFacesFeature;
    // [ default ] interface IStdSolidLoftFacesFeature

struct __declspec(uuid("c130d261-1349-498c-9bfe-bf50fb210de5"))
Component;
    // [ default ] interface IComp

struct __declspec(uuid("f6b91c04-fe7c-42f7-9eda-ea422488435a"))
StdSolidLoftSectionsFeature;
    // [ default ] interface IStdSolidLoftSectionsFeature

struct __declspec(uuid("4355bb2c-26f5-4b54-9fd1-3bec29a14e20"))
StdSolidCutSweepFeature;
    // [ default ] interface IStdSolidCutSweepFeature

struct __declspec(uuid("862655c6-a468-40ea-ae7f-e115dc173166"))
StdSolidHoleSimpleFeature;
    // [ default ] interface IStdSolidHoleSimpleFeature

struct __declspec(uuid("dbce6749-f171-4bfe-b16b-bb503388ccad"))
StdSolidShellFeature;
    // [ default ] interface IStdSolidShellFeature

struct __declspec(uuid("9b592ae3-252b-4055-a929-40b61fd579b3"))
StdSolidRevolveWithExternalAxisFeature;
    // [ default ] interface IStdSolidRevolveWithExternalAxisFeature

struct __declspec(uuid("ea4665a7-a1e0-4114-a9c4-b5ce51b7ed98"))
StdSolidDraftFeature;
    // [ default ] interface IStdSolidDraftFeature

struct __declspec(uuid("d0e64bdd-dae0-4a3b-b498-ffa4aa3965c6"))
StdSolidOffsetFeature;
    // [ default ] interface IStdSolidOffsetFeature

struct __declspec(uuid("0b1da8b1-f07a-4992-9608-33dc223e7026"))
StdSolidImportedBrepFeature;
    // [ default ] interface IStdSolidImportedBrepFeature

struct __declspec(uuid("e43a5792-fad8-4900-8ada-6bc7aef9f853"))
Solid;
    // [ default ] interface ISolid

struct __declspec(uuid("286f04ff-35ee-4de3-ba7c-caf5dfeb299f"))
Faces;
    // [ default ] interface IFaces

struct __declspec(uuid("d7fdb9a6-b050-459d-b151-67dfd75334b3"))
Edges;
    // [ default ] interface IEdges

struct __declspec(uuid("be3eb3fd-27b1-4e8c-8e18-bbf82ed6e7fa"))
Face;
    // [ default ] interface IFace

struct __declspec(uuid("3d778a2f-4507-42f3-badc-3491616fcaf0"))
Edge;
    // [ default ] interface IEdge

struct __declspec(uuid("c89024ce-bdc2-4b60-9151-73fc7e61ad96"))
Vertices;
    // [ default ] interface IVertices

struct __declspec(uuid("b6197b74-41dc-4bb5-b28a-3f730071a44c"))
Vertex;
    // [ default ] interface IVertex

struct __declspec(uuid("36d30594-7f32-4c2d-a839-c51c1f79c47b"))
Point3D;
    // [ default ] interface IPoint3D

struct __declspec(uuid("381b3303-9eea-482a-a184-f404c85ab87d"))
IPoint3D : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX,put=PutX))
    double X;
    __declspec(property(get=GetY,put=PutY))
    double Y;
    __declspec(property(get=Getz,put=Putz))
    double z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    void PutX (
        double pVal );
    double GetY ( );
    void PutY (
        double pVal );
    double Getz ( );
    void Putz (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_z (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("fff99068-ddb2-419e-acfd-283b1c946fbe"))
Axis1;
    // [ default ] interface IAxis1

struct __declspec(uuid("f30ad8b9-836e-4869-b5a2-cd7682555719"))
IAxis1 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocation,put=PutLocation))
    IPoint3DPtr Location;
    __declspec(property(get=GetDirection,put=PutDirection))
    IPoint3DPtr Direction;

    //
    // Wrapper methods for error-handling
    //

    IPoint3DPtr GetLocation ( );
    void PutLocation (
        struct IPoint3D * pVal );
    IPoint3DPtr GetDirection ( );
    void PutDirection (
        struct IPoint3D * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct IPoint3D * * pVal ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ struct IPoint3D * pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ struct IPoint3D * * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ struct IPoint3D * pVal ) = 0;
};

struct __declspec(uuid("5cb7b87b-a240-4eab-a450-1186189d841e"))
StdAssemConstraints;
    // [ default ] interface IStdAssemConstraints

struct __declspec(uuid("ace6c03b-3878-46ed-b9df-12858a904e5d"))
StdAssemConstraintCoaxial;
    // [ default ] interface IStdAssemConstraintCoaxial

struct __declspec(uuid("88630bbd-06d6-4e81-9552-d2f88d2e8cf5"))
StdAssemConstraintIncidence;
    // [ default ] interface IStdAssemConstraintIncidence

struct __declspec(uuid("19487fb9-54f2-49a6-9dae-fd9addd12a76"))
IApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActiveDocument))
    IDocPtr ActiveDocument;
    __declspec(property(get=GetDocuments))
    IDocsPtr Documents;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDocPtr GetActiveDocument ( );
    IDocsPtr GetDocuments ( );
    _bstr_t GetName ( );
    HRESULT Quit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveDocument (
        /*[out,retval]*/ struct IDoc * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ struct IDocs * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
};

struct __declspec(uuid("bc5f8ab3-0439-4f12-af08-8f7d74928940"))
IDoc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetSaved))
    VARIANT_BOOL Saved;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    VARIANT_BOOL GetSaved ( );
    HRESULT Activate ( );
    HRESULT Close (
        VARIANT_BOOL saveChanges,
        _bstr_t filename );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Saved (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT_BOOL saveChanges,
        /*[in]*/ BSTR filename ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR filename ) = 0;
};

struct __declspec(uuid("f898093c-1b98-420d-b097-c2f1e88ca345"))
IFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum FeatureType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum FeatureType GetType ( );
    _bstr_t GetName ( );
    HRESULT SetName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum FeatureType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("86e4ff07-1f31-42ad-a922-315c8dd57943"))
IExplicitModelObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum ExplicitModelObjectType Type;
    __declspec(property(get=GetCreator))
    IFeaturePtr Creator;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum ExplicitModelObjectType GetType ( );
    IFeaturePtr GetCreator ( );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ExplicitModelObjectType * pVal ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ struct IFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("0235d6ab-e6f9-4665-98af-75b7d56a0129"))
ISketch : IExplicitModelObject
{};

struct __declspec(uuid("570069a3-ac18-40e5-9cd4-be1ecf8318e2"))
IStdSolidProtrusionExtrudeFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileSketch,put=PutProfileSketch))
    IReferencePtr ProfileSketch;
    __declspec(property(get=GetIsFlip,put=PutIsFlip))
    VARIANT_BOOL IsFlip;
    __declspec(property(get=GetStartCondition,put=PutStartCondition))
    enum StdExtrudeEndType StartCondition;
    __declspec(property(get=GetStartDepth,put=PutStartDepth))
    double StartDepth;
    __declspec(property(get=GetEndCondition,put=PutEndCondition))
    enum StdExtrudeEndType EndCondition;
    __declspec(property(get=GetEndDepth,put=PutEndDepth))
    double EndDepth;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetProfileSketch ( );
    void PutProfileSketch (
        struct IReference * ppVal );
    VARIANT_BOOL GetIsFlip ( );
    void PutIsFlip (
        VARIANT_BOOL pVal );
    enum StdExtrudeEndType GetStartCondition ( );
    void PutStartCondition (
        enum StdExtrudeEndType pVal );
    double GetStartDepth ( );
    void PutStartDepth (
        double pVal );
    enum StdExtrudeEndType GetEndCondition ( );
    void PutEndCondition (
        enum StdExtrudeEndType pVal );
    double GetEndDepth ( );
    void PutEndDepth (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileSketch (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ProfileSketch (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsFlip (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFlip (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StartCondition (
        /*[out,retval]*/ enum StdExtrudeEndType * pVal ) = 0;
      virtual HRESULT __stdcall put_StartCondition (
        /*[in]*/ enum StdExtrudeEndType pVal ) = 0;
      virtual HRESULT __stdcall get_StartDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartDepth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndCondition (
        /*[out,retval]*/ enum StdExtrudeEndType * pVal ) = 0;
      virtual HRESULT __stdcall put_EndCondition (
        /*[in]*/ enum StdExtrudeEndType pVal ) = 0;
      virtual HRESULT __stdcall get_EndDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndDepth (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("8645e5ad-94df-48a8-ad8e-9ed717ac4691"))
IStdSolidCutExtrudeFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileSketch,put=PutProfileSketch))
    IReferencePtr ProfileSketch;
    __declspec(property(get=GetIsFlip,put=PutIsFlip))
    VARIANT_BOOL IsFlip;
    __declspec(property(get=GetStartCondition,put=PutStartCondition))
    enum StdExtrudeEndType StartCondition;
    __declspec(property(get=GetStartDepth,put=PutStartDepth))
    double StartDepth;
    __declspec(property(get=GetEndCondition,put=PutEndCondition))
    enum StdExtrudeEndType EndCondition;
    __declspec(property(get=GetEndDepth,put=PutEndDepth))
    double EndDepth;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetProfileSketch ( );
    void PutProfileSketch (
        struct IReference * ppVal );
    VARIANT_BOOL GetIsFlip ( );
    void PutIsFlip (
        VARIANT_BOOL pVal );
    enum StdExtrudeEndType GetStartCondition ( );
    void PutStartCondition (
        enum StdExtrudeEndType pVal );
    double GetStartDepth ( );
    void PutStartDepth (
        double pVal );
    enum StdExtrudeEndType GetEndCondition ( );
    void PutEndCondition (
        enum StdExtrudeEndType pVal );
    double GetEndDepth ( );
    void PutEndDepth (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileSketch (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ProfileSketch (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsFlip (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFlip (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StartCondition (
        /*[out,retval]*/ enum StdExtrudeEndType * pVal ) = 0;
      virtual HRESULT __stdcall put_StartCondition (
        /*[in]*/ enum StdExtrudeEndType pVal ) = 0;
      virtual HRESULT __stdcall get_StartDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartDepth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndCondition (
        /*[out,retval]*/ enum StdExtrudeEndType * pVal ) = 0;
      virtual HRESULT __stdcall put_EndCondition (
        /*[in]*/ enum StdExtrudeEndType pVal ) = 0;
      virtual HRESULT __stdcall get_EndDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndDepth (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("7813d4f8-1398-4a75-8fea-af3a262a9898"))
IStdSolidFilletConstantFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetFilletEdges,put=PutFilletEdges))
    IReferencesPtr FilletEdges;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetPropagation,put=PutPropagation))
    enum PropagationType Propagation;
    __declspec(property(get=GetStartPosX))
    double StartPosX;
    __declspec(property(get=GetStartPosY))
    double StartPosY;
    __declspec(property(get=GetStartPosZ))
    double StartPosZ;
    __declspec(property(get=GetEndPosX))
    double EndPosX;
    __declspec(property(get=GetEndPosY))
    double EndPosY;
    __declspec(property(get=GetEndPosZ))
    double EndPosZ;
    __declspec(property(get=GetStartPosXAt))
    double StartPosXAt[];
    __declspec(property(get=GetStartPosYAt))
    double StartPosYAt[];
    __declspec(property(get=GetStartPosZAt))
    double StartPosZAt[];
    __declspec(property(get=GetEndPosXAt))
    double EndPosXAt[];
    __declspec(property(get=GetEndPosYAt))
    double EndPosYAt[];
    __declspec(property(get=GetEndPosZAt))
    double EndPosZAt[];

    //
    // Wrapper methods for error-handling
    //

    IReferencesPtr GetFilletEdges ( );
    void PutFilletEdges (
        struct IReferences * ppVal );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    enum PropagationType GetPropagation ( );
    void PutPropagation (
        enum PropagationType pVal );
    double GetStartPosX ( );
    double GetStartPosY ( );
    double GetStartPosZ ( );
    double GetEndPosX ( );
    double GetEndPosY ( );
    double GetEndPosZ ( );
    double GetStartPosXAt (
        int index );
    double GetStartPosYAt (
        int index );
    double GetStartPosZAt (
        int index );
    double GetEndPosXAt (
        int index );
    double GetEndPosYAt (
        int index );
    double GetEndPosZAt (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilletEdges (
        /*[out,retval]*/ struct IReferences * * ppVal ) = 0;
      virtual HRESULT __stdcall put_FilletEdges (
        /*[in]*/ struct IReferences * ppVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Propagation (
        /*[out,retval]*/ enum PropagationType * pVal ) = 0;
      virtual HRESULT __stdcall put_Propagation (
        /*[in]*/ enum PropagationType pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosXAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosYAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosZAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosXAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosYAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosZAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("7397f21a-e19f-4eda-b89f-e18405bd3760"))
IStdSolidChamferFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetChamferType))
    enum ChamferType _ChamferType;
    __declspec(property(get=GetSelectedEdges,put=PutSelectedEdges))
    IReferencesPtr SelectedEdges;
    __declspec(property(get=GetSelectedFace))
    IReferencePtr SelectedFace;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetValue))
    double Value;
    __declspec(property(get=GetStartPosX))
    double StartPosX;
    __declspec(property(get=GetStartPosY))
    double StartPosY;
    __declspec(property(get=GetStartPosZ))
    double StartPosZ;
    __declspec(property(get=GetEndPosX))
    double EndPosX;
    __declspec(property(get=GetEndPosY))
    double EndPosY;
    __declspec(property(get=GetEndPosZ))
    double EndPosZ;
    __declspec(property(get=GetStartPosXAt))
    double StartPosXAt[];
    __declspec(property(get=GetStartPosYAt))
    double StartPosYAt[];
    __declspec(property(get=GetStartPosZAt))
    double StartPosZAt[];
    __declspec(property(get=GetEndPosXAt))
    double EndPosXAt[];
    __declspec(property(get=GetEndPosYAt))
    double EndPosYAt[];
    __declspec(property(get=GetEndPosZAt))
    double EndPosZAt[];

    //
    // Wrapper methods for error-handling
    //

    enum ChamferType GetChamferType ( );
    IReferencesPtr GetSelectedEdges ( );
    void PutSelectedEdges (
        struct IReferences * ppVal );
    IReferencePtr GetSelectedFace ( );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetValue ( );
    double GetStartPosX ( );
    double GetStartPosY ( );
    double GetStartPosZ ( );
    double GetEndPosX ( );
    double GetEndPosY ( );
    double GetEndPosZ ( );
    double GetStartPosXAt (
        int index );
    double GetStartPosYAt (
        int index );
    double GetStartPosZAt (
        int index );
    double GetEndPosXAt (
        int index );
    double GetEndPosYAt (
        int index );
    double GetEndPosZAt (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChamferType (
        /*[out,retval]*/ enum ChamferType * pVal ) = 0;
      virtual HRESULT __stdcall get_SelectedEdges (
        /*[out,retval]*/ struct IReferences * * ppVal ) = 0;
      virtual HRESULT __stdcall put_SelectedEdges (
        /*[in]*/ struct IReferences * ppVal ) = 0;
      virtual HRESULT __stdcall get_SelectedFace (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosXAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosYAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartPosZAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosXAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosYAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndPosZAt (
        /*[in]*/ int index,
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("62f39890-0584-4142-a8de-e419f9bf7301"))
IStdSolidProtrusionSweepFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileSketch,put=PutProfileSketch))
    IReferencePtr ProfileSketch;
    __declspec(property(get=GetGuideCurve,put=PutGuideCurve))
    IReferencePtr GuideCurve;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetProfileSketch ( );
    void PutProfileSketch (
        struct IReference * ppVal );
    IReferencePtr GetGuideCurve ( );
    void PutGuideCurve (
        struct IReference * ppVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileSketch (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ProfileSketch (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_GuideCurve (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_GuideCurve (
        /*[in]*/ struct IReference * ppVal ) = 0;
};

struct __declspec(uuid("b8aac9d3-8453-48c9-ac93-a116e891101e"))
IStdSolidProtrusionRevolveFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileSketch,put=PutProfileSketch))
    IReferencePtr ProfileSketch;
    __declspec(property(get=GetIsFlip,put=PutIsFlip))
    VARIANT_BOOL IsFlip;
    __declspec(property(get=GetStartCondition))
    enum StdRevolveEndType StartCondition;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetEndCondition))
    enum StdRevolveEndType EndCondition;
    __declspec(property(get=GetEndAngle,put=PutEndAngle))
    double EndAngle;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetProfileSketch ( );
    void PutProfileSketch (
        struct IReference * ppVal );
    VARIANT_BOOL GetIsFlip ( );
    void PutIsFlip (
        VARIANT_BOOL pVal );
    enum StdRevolveEndType GetStartCondition ( );
    double GetStartAngle ( );
    void PutStartAngle (
        double pVal );
    enum StdRevolveEndType GetEndCondition ( );
    double GetEndAngle ( );
    void PutEndAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileSketch (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ProfileSketch (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsFlip (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFlip (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StartCondition (
        /*[out,retval]*/ enum StdRevolveEndType * pVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndCondition (
        /*[out,retval]*/ enum StdRevolveEndType * pVal ) = 0;
      virtual HRESULT __stdcall get_EndAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndAngle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("1b8e8e40-7d68-4387-a13f-d8e204212607"))
IStdSolidCutRevolveFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileSketch,put=PutProfileSketch))
    IReferencePtr ProfileSketch;
    __declspec(property(get=GetIsFlip,put=PutIsFlip))
    VARIANT_BOOL IsFlip;
    __declspec(property(get=GetStartCondition))
    enum StdRevolveEndType StartCondition;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetEndCondition))
    enum StdRevolveEndType EndCondition;
    __declspec(property(get=GetEndAngle,put=PutEndAngle))
    double EndAngle;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetProfileSketch ( );
    void PutProfileSketch (
        struct IReference * ppVal );
    VARIANT_BOOL GetIsFlip ( );
    void PutIsFlip (
        VARIANT_BOOL pVal );
    enum StdRevolveEndType GetStartCondition ( );
    double GetStartAngle ( );
    void PutStartAngle (
        double pVal );
    enum StdRevolveEndType GetEndCondition ( );
    double GetEndAngle ( );
    void PutEndAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileSketch (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ProfileSketch (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsFlip (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFlip (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StartCondition (
        /*[out,retval]*/ enum StdRevolveEndType * pVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndCondition (
        /*[out,retval]*/ enum StdRevolveEndType * pVal ) = 0;
      virtual HRESULT __stdcall get_EndAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndAngle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("929007fb-0ff4-477a-bc6b-9db63b4f6407"))
IStdSolidOperatePatternRectangularFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetFeatures,put=PutTargetFeatures))
    IReferencesPtr TargetFeatures;
    __declspec(property(get=GetColumnSpacing,put=PutColumnSpacing))
    double ColumnSpacing;
    __declspec(property(get=GetColumnNumber,put=PutColumnNumber))
    int ColumnNumber;
    __declspec(property(get=GetRowSpacing,put=PutRowSpacing))
    double RowSpacing;
    __declspec(property(get=GetRowNumber,put=PutRowNumber))
    int RowNumber;

    //
    // Wrapper methods for error-handling
    //

    IReferencesPtr GetTargetFeatures ( );
    void PutTargetFeatures (
        struct IReferences * ppVal );
    double GetColumnSpacing ( );
    void PutColumnSpacing (
        double pVal );
    void GetColumnDirection (
        double * X,
        double * Y,
        double * z );
    int GetColumnNumber ( );
    void PutColumnNumber (
        int pVal );
    double GetRowSpacing ( );
    void PutRowSpacing (
        double pVal );
    void GetRowDirection (
        double * X,
        double * Y,
        double * z );
    int GetRowNumber ( );
    void PutRowNumber (
        int pVal );
    HRESULT PutColumnDirection (
        double X,
        double Y,
        double z );
    HRESULT PutRowDirection (
        double X,
        double Y,
        double z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetFeatures (
        /*[out,retval]*/ struct IReferences * * ppVal ) = 0;
      virtual HRESULT __stdcall put_TargetFeatures (
        /*[in]*/ struct IReferences * ppVal ) = 0;
      virtual HRESULT __stdcall get_ColumnSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnDirection (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_ColumnNumber (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_ColumnNumber (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_RowSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RowSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RowDirection (
        /*[out]*/ double * X,
        /*[out]*/ double * Y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_RowNumber (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_RowNumber (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall raw_PutColumnDirection (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_PutRowDirection (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double z ) = 0;
};

struct __declspec(uuid("1b44e76f-21ad-482b-a2d4-950375ec2d61"))
IStdSolidOperatePatternCircularFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetFeatures,put=PutTargetFeatures))
    IReferencesPtr TargetFeatures;
    __declspec(property(get=GetAngleNumber,put=PutAngleNumber))
    int AngleNumber;
    __declspec(property(get=GetAngleIncrement,put=PutAngleIncrement))
    double AngleIncrement;
    __declspec(property(get=GetRadialNumber,put=PutRadialNumber))
    int RadialNumber;
    __declspec(property(get=GetRadialSpacing,put=PutRadialSpacing))
    double RadialSpacing;
    __declspec(property(get=GetIsRadialAnignment,put=PutIsRadialAnignment))
    VARIANT_BOOL IsRadialAnignment;

    //
    // Wrapper methods for error-handling
    //

    IReferencesPtr GetTargetFeatures ( );
    void PutTargetFeatures (
        struct IReferences * ppVal );
    void GetCenterAxis (
        double * x1,
        double * y1,
        double * z1,
        double * x2,
        double * y2,
        double * z2 );
    int GetAngleNumber ( );
    void PutAngleNumber (
        int pVal );
    double GetAngleIncrement ( );
    void PutAngleIncrement (
        double pVal );
    int GetRadialNumber ( );
    void PutRadialNumber (
        int pVal );
    double GetRadialSpacing ( );
    void PutRadialSpacing (
        double pVal );
    VARIANT_BOOL GetIsRadialAnignment ( );
    void PutIsRadialAnignment (
        VARIANT_BOOL pVal );
    HRESULT PutCenterAxis (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetFeatures (
        /*[out,retval]*/ struct IReferences * * ppVal ) = 0;
      virtual HRESULT __stdcall put_TargetFeatures (
        /*[in]*/ struct IReferences * ppVal ) = 0;
      virtual HRESULT __stdcall get_CenterAxis (
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * z1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ double * z2 ) = 0;
      virtual HRESULT __stdcall get_AngleNumber (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleNumber (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_AngleIncrement (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleIncrement (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RadialNumber (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_RadialNumber (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_RadialSpacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RadialSpacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsRadialAnignment (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsRadialAnignment (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_PutCenterAxis (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2 ) = 0;
};

struct __declspec(uuid("5089ae2e-41c5-4dd3-bffa-6b5ecff99141"))
IStdSolidHoleCounterboredFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetFace,put=PutTargetFace))
    IReferencePtr TargetFace;
    __declspec(property(get=GetStartRadius,put=PutStartRadius))
    double StartRadius;
    __declspec(property(get=GetStartDepth,put=PutStartDepth))
    double StartDepth;
    __declspec(property(get=GetEndRadius,put=PutEndRadius))
    double EndRadius;
    __declspec(property(get=GetEndDepth,put=PutEndDepth))
    double EndDepth;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetTargetFace ( );
    void PutTargetFace (
        struct IReference * ppVal );
    void GetCenterPoint (
        double * cx,
        double * cy,
        double * cz );
    double GetStartRadius ( );
    void PutStartRadius (
        double pVal );
    double GetStartDepth ( );
    void PutStartDepth (
        double pVal );
    double GetEndRadius ( );
    void PutEndRadius (
        double pVal );
    double GetEndDepth ( );
    void PutEndDepth (
        double pVal );
    double GetAngle ( );
    void PutAngle (
        double pVal );
    HRESULT PutCenterPoint (
        double cx,
        double cy,
        double cz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetFace (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_TargetFace (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_CenterPoint (
        /*[out]*/ double * cx,
        /*[out]*/ double * cy,
        /*[out]*/ double * cz ) = 0;
      virtual HRESULT __stdcall get_StartRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartDepth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndDepth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_PutCenterPoint (
        /*[in]*/ double cx,
        /*[in]*/ double cy,
        /*[in]*/ double cz ) = 0;
};

struct __declspec(uuid("9980b5be-2421-46dc-9425-84588082dd28"))
IStdSolidHoleCountersunkFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetFace,put=PutTargetFace))
    IReferencePtr TargetFace;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDepth,put=PutDepth))
    double Depth;
    __declspec(property(get=GetSinkRadius,put=PutSinkRadius))
    double SinkRadius;
    __declspec(property(get=GetSinkAngle,put=PutSinkAngle))
    double SinkAngle;
    __declspec(property(get=GetBottomAngle,put=PutBottomAngle))
    double BottomAngle;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetTargetFace ( );
    void PutTargetFace (
        struct IReference * ppVal );
    void GetCenterPoint (
        double * cx,
        double * cy,
        double * cz );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetDepth ( );
    void PutDepth (
        double pVal );
    double GetSinkRadius ( );
    void PutSinkRadius (
        double pVal );
    double GetSinkAngle ( );
    void PutSinkAngle (
        double pVal );
    double GetBottomAngle ( );
    void PutBottomAngle (
        double pVal );
    HRESULT PutCenterPoint (
        double cx,
        double cy,
        double cz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetFace (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_TargetFace (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_CenterPoint (
        /*[out]*/ double * cx,
        /*[out]*/ double * cy,
        /*[out]*/ double * cz ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SinkRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SinkRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SinkAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SinkAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BottomAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_PutCenterPoint (
        /*[in]*/ double cx,
        /*[in]*/ double cy,
        /*[in]*/ double cz ) = 0;
};

struct __declspec(uuid("5a9fb9f5-92a5-4e46-b5a5-d9c163a1fd8c"))
IStdDatumPlaneOffsetFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedPlane,put=PutSelectedPlane))
    IReferencePtr SelectedPlane;
    __declspec(property(get=GetIsFlip,put=PutIsFlip))
    VARIANT_BOOL IsFlip;
    __declspec(property(get=GetDistance,put=PutDistance))
    double Distance;
    __declspec(property(get=GetIsFree))
    VARIANT_BOOL IsFree;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetSelectedPlane ( );
    void PutSelectedPlane (
        struct IReference * ppVal );
    VARIANT_BOOL GetIsFlip ( );
    void PutIsFlip (
        VARIANT_BOOL pVal );
    double GetDistance ( );
    void PutDistance (
        double pVal );
    VARIANT_BOOL GetIsFree ( );
    void GetOrigin (
        double * ox,
        double * oy,
        double * oz );
    void GetXDirection (
        double * xx,
        double * xy,
        double * xz );
    void GetYDirection (
        double * yx,
        double * yy,
        double * yz );
    HRESULT PutOrigin (
        double ox,
        double oy,
        double oz );
    HRESULT PutXDirection (
        double xx,
        double xy,
        double xz );
    HRESULT PutYDirection (
        double yx,
        double yy,
        double yz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SelectedPlane (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_SelectedPlane (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsFlip (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFlip (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Distance (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Distance (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_IsFree (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Origin (
        /*[out]*/ double * ox,
        /*[out]*/ double * oy,
        /*[out]*/ double * oz ) = 0;
      virtual HRESULT __stdcall get_XDirection (
        /*[out]*/ double * xx,
        /*[out]*/ double * xy,
        /*[out]*/ double * xz ) = 0;
      virtual HRESULT __stdcall get_YDirection (
        /*[out]*/ double * yx,
        /*[out]*/ double * yy,
        /*[out]*/ double * yz ) = 0;
      virtual HRESULT __stdcall raw_PutOrigin (
        /*[in]*/ double ox,
        /*[in]*/ double oy,
        /*[in]*/ double oz ) = 0;
      virtual HRESULT __stdcall raw_PutXDirection (
        /*[in]*/ double xx,
        /*[in]*/ double xy,
        /*[in]*/ double xz ) = 0;
      virtual HRESULT __stdcall raw_PutYDirection (
        /*[in]*/ double yx,
        /*[in]*/ double yy,
        /*[in]*/ double yz ) = 0;
};

struct __declspec(uuid("b1a7fe7f-54bf-4ce5-8947-831358c38d56"))
IStdSolidLoftFacesFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetFace1))
    IReferencePtr Face1;
    __declspec(property(get=GetParam1))
    double Param1;
    __declspec(property(get=GetFace2))
    IReferencePtr Face2;
    __declspec(property(get=GetParam2))
    double Param2;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetFace1 ( );
    double GetParam1 ( );
    IReferencePtr GetFace2 ( );
    double GetParam2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Face1 (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Param1 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Face2 (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Param2 (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("09be8c17-db20-4474-8be9-f4d94e27261a"))
IStdSolidLoftSectionsFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetReferences))
    IReferencesPtr References;
    __declspec(property(get=GetIsCut))
    VARIANT_BOOL IsCut;

    //
    // Wrapper methods for error-handling
    //

    IReferencesPtr GetReferences ( );
    VARIANT_BOOL GetIsCut ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_References (
        /*[out,retval]*/ struct IReferences * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsCut (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("cf090569-05d8-44a0-8656-82bdfe1b79a6"))
IStdSolidCutSweepFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileSketch,put=PutProfileSketch))
    IReferencePtr ProfileSketch;
    __declspec(property(get=GetGuideCurve,put=PutGuideCurve))
    IReferencePtr GuideCurve;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetProfileSketch ( );
    void PutProfileSketch (
        struct IReference * ppVal );
    IReferencePtr GetGuideCurve ( );
    void PutGuideCurve (
        struct IReference * ppVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileSketch (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ProfileSketch (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_GuideCurve (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_GuideCurve (
        /*[in]*/ struct IReference * ppVal ) = 0;
};

struct __declspec(uuid("fccf7496-9645-4b6d-9c4d-067d3d1d60af"))
IStdSolidHoleSimpleFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetFace,put=PutTargetFace))
    IReferencePtr TargetFace;
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetDepth,put=PutDepth))
    double Depth;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetTargetFace ( );
    void PutTargetFace (
        struct IReference * ppVal );
    void GetCenterPoint (
        double * cx,
        double * cy,
        double * cz );
    double GetRadius ( );
    void PutRadius (
        double pVal );
    double GetDepth ( );
    void PutDepth (
        double pVal );
    HRESULT PutCenterPoint (
        double cx,
        double cy,
        double cz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetFace (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_TargetFace (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_CenterPoint (
        /*[out]*/ double * cx,
        /*[out]*/ double * cy,
        /*[out]*/ double * cz ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_PutCenterPoint (
        /*[in]*/ double cx,
        /*[in]*/ double cy,
        /*[in]*/ double cz ) = 0;
};

struct __declspec(uuid("66548701-6acc-4271-98a8-d7666930ff05"))
IStdSolidShellFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetFaces,put=PutTargetFaces))
    IReferencesPtr TargetFaces;
    __declspec(property(get=GetInnerThickness,put=PutInnerThickness))
    double InnerThickness;
    __declspec(property(get=GetOuterThickness,put=PutOuterThickness))
    double OuterThickness;

    //
    // Wrapper methods for error-handling
    //

    IReferencesPtr GetTargetFaces ( );
    void PutTargetFaces (
        struct IReferences * ppVal );
    double GetInnerThickness ( );
    void PutInnerThickness (
        double pVal );
    double GetOuterThickness ( );
    void PutOuterThickness (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetFaces (
        /*[out,retval]*/ struct IReferences * * ppVal ) = 0;
      virtual HRESULT __stdcall put_TargetFaces (
        /*[in]*/ struct IReferences * ppVal ) = 0;
      virtual HRESULT __stdcall get_InnerThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_InnerThickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OuterThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OuterThickness (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("ea1585e2-4e46-44e1-808b-4432b9896e2d"))
IStdSolidRevolveWithExternalAxisFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetProfileSketch,put=PutProfileSketch))
    IReferencePtr ProfileSketch;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetStartCondition))
    enum StdRevolveEndType StartCondition;
    __declspec(property(get=GetEndAngle,put=PutEndAngle))
    double EndAngle;
    __declspec(property(get=GetEndCondition))
    enum StdRevolveEndType EndCondition;
    __declspec(property(get=GetIsFlip,put=PutIsFlip))
    VARIANT_BOOL IsFlip;
    __declspec(property(get=GetIsCut,put=PutIsCut))
    VARIANT_BOOL IsCut;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetProfileSketch ( );
    void PutProfileSketch (
        struct IReference * ppVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pVal );
    enum StdRevolveEndType GetStartCondition ( );
    double GetEndAngle ( );
    void PutEndAngle (
        double pVal );
    enum StdRevolveEndType GetEndCondition ( );
    VARIANT_BOOL GetIsFlip ( );
    void PutIsFlip (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsCut ( );
    void PutIsCut (
        VARIANT_BOOL pVal );
    void GetRevolveAxis (
        double * orgX,
        double * orgY,
        double * orgZ,
        double * dirX,
        double * dirY,
        double * dirZ );
    HRESULT PutRevolveAxis (
        double orgX,
        double orgY,
        double orgZ,
        double dirX,
        double dirY,
        double dirZ );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProfileSketch (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ProfileSketch (
        /*[in]*/ struct IReference * ppVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartCondition (
        /*[out,retval]*/ enum StdRevolveEndType * pVal ) = 0;
      virtual HRESULT __stdcall get_EndAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndCondition (
        /*[out,retval]*/ enum StdRevolveEndType * pVal ) = 0;
      virtual HRESULT __stdcall get_IsFlip (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsFlip (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsCut (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsCut (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RevolveAxis (
        /*[out]*/ double * orgX,
        /*[out]*/ double * orgY,
        /*[out]*/ double * orgZ,
        /*[out]*/ double * dirX,
        /*[out]*/ double * dirY,
        /*[out]*/ double * dirZ ) = 0;
      virtual HRESULT __stdcall raw_PutRevolveAxis (
        /*[in]*/ double orgX,
        /*[in]*/ double orgY,
        /*[in]*/ double orgZ,
        /*[in]*/ double dirX,
        /*[in]*/ double dirY,
        /*[in]*/ double dirZ ) = 0;
};

struct __declspec(uuid("2ac4b8da-f372-4214-89f7-ab6231e94691"))
IStdSolidDraftFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetFaces,put=PutTargetFaces))
    IReferencesPtr TargetFaces;
    __declspec(property(get=GetDraftAngle,put=PutDraftAngle))
    double DraftAngle;

    //
    // Wrapper methods for error-handling
    //

    IReferencesPtr GetTargetFaces ( );
    void PutTargetFaces (
        struct IReferences * ppVal );
    double GetDraftAngle ( );
    void PutDraftAngle (
        double pVal );
    void GetPullingDirection (
        double * orgX,
        double * orgY,
        double * orgZ,
        double * dirX,
        double * dirY,
        double * dirZ );
    HRESULT PutPullingDirection (
        double orgX,
        double orgY,
        double orgZ,
        double dirX,
        double dirY,
        double dirZ );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetFaces (
        /*[out,retval]*/ struct IReferences * * ppVal ) = 0;
      virtual HRESULT __stdcall put_TargetFaces (
        /*[in]*/ struct IReferences * ppVal ) = 0;
      virtual HRESULT __stdcall get_DraftAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DraftAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PullingDirection (
        /*[out]*/ double * orgX,
        /*[out]*/ double * orgY,
        /*[out]*/ double * orgZ,
        /*[out]*/ double * dirX,
        /*[out]*/ double * dirY,
        /*[out]*/ double * dirZ ) = 0;
      virtual HRESULT __stdcall raw_PutPullingDirection (
        /*[in]*/ double orgX,
        /*[in]*/ double orgY,
        /*[in]*/ double orgZ,
        /*[in]*/ double dirX,
        /*[in]*/ double dirY,
        /*[in]*/ double dirZ ) = 0;
};

struct __declspec(uuid("b7a36313-ca66-4a4b-83be-b797fb0de80a"))
IStdSolidOffsetFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetTargetFaces,put=PutTargetFaces))
    IReferencesPtr TargetFaces;
    __declspec(property(get=GetOffsetThickness,put=PutOffsetThickness))
    double OffsetThickness;

    //
    // Wrapper methods for error-handling
    //

    IReferencesPtr GetTargetFaces ( );
    void PutTargetFaces (
        struct IReferences * ppVal );
    double GetOffsetThickness ( );
    void PutOffsetThickness (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TargetFaces (
        /*[out,retval]*/ struct IReferences * * ppVal ) = 0;
      virtual HRESULT __stdcall put_TargetFaces (
        /*[in]*/ struct IReferences * ppVal ) = 0;
      virtual HRESULT __stdcall get_OffsetThickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetThickness (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("378eba37-1568-40e9-bd72-ea48ed471edc"))
IStdSolidImportedBrepFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetFilePath))
    _bstr_t FilePath;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFilePath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("0861dbf0-310a-4f63-bb23-dc9c37341155"))
IStdAssemConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum StdAssemblyConstraintType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum StdAssemblyConstraintType GetType ( );
    _bstr_t GetName ( );
    HRESULT SetName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum StdAssemblyConstraintType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f91a93a8-65a9-48dc-a44f-bdd01cbef588"))
IStdDefaultDatumPlaneFeature : IFeature
{};

struct __declspec(uuid("c12fb0da-8bb2-4cf4-bc4f-7d538ba36727"))
IDocs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDocPtr Item[];
    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDocPtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );
    IPartDocumentPtr AddPartDocument ( );
    IAssemDocumentPtr AddAssemDocument ( );
    HRESULT Close ( );
    IPartDocumentPtr Open (
        _bstr_t filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IDoc * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_AddPartDocument (
        /*[out,retval]*/ struct IPartDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddAssemDocument (
        /*[out,retval]*/ struct IAssemDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR filename,
        /*[out,retval]*/ struct IPartDocument * * ppVal ) = 0;
};

struct __declspec(uuid("c37f3bc0-22dd-4e20-a203-286ace862758"))
IPartDocument : IDoc
{
    //
    // Property data
    //

    __declspec(property(get=GetPart))
    IPartPtr Part;
    __declspec(property(get=GetTitle))
    _bstr_t Title;

    //
    // Wrapper methods for error-handling
    //

    IPartPtr GetPart ( );
    HRESULT Update ( );
    _bstr_t GetTitle ( );
    HRESULT DoMeshGeneration (
        double normalTolerance,
        double surfaceTolerance );
    HRESULT GetBBDiagonal ( );
    HRESULT ImportFromCATIA (
        _bstr_t FilePath );
    HRESULT ExportToCATIA (
        _bstr_t FilePath );
    HRESULT ImportFromUG (
        _bstr_t FilePath );
    HRESULT ExportToUG (
        _bstr_t FilePath );
    HRESULT ExportToMesh (
        _bstr_t FilePath );
    HRESULT ExportToBrep (
        _bstr_t FilePath );
    HRESULT ExportToXML (
        _bstr_t FilePath );
    HRESULT ImportFromXML (
        _bstr_t FilePath );
    HRESULT RunScriptInterface (
        _bstr_t command );
    HRESULT ImportFromBrep (
        _bstr_t FilePath );
    HRESULT ConvertMesh (
        _bstr_t sourcePath,
        _bstr_t targetPath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IPart * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_DoMeshGeneration (
        double normalTolerance,
        double surfaceTolerance ) = 0;
      virtual HRESULT __stdcall raw_GetBBDiagonal ( ) = 0;
      virtual HRESULT __stdcall raw_ImportFromCATIA (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_ExportToCATIA (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_ImportFromUG (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_ExportToUG (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_ExportToMesh (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_ExportToBrep (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_ExportToXML (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_ImportFromXML (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_RunScriptInterface (
        /*[in]*/ BSTR command ) = 0;
      virtual HRESULT __stdcall raw_ImportFromBrep (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_ConvertMesh (
        /*[in]*/ BSTR sourcePath,
        /*[in]*/ BSTR targetPath ) = 0;
};

struct __declspec(uuid("37ebffcd-077e-4323-83e0-3a8255afb845"))
IPart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFeatures))
    IFeaturesPtr Features;
    __declspec(property(get=GetSolid))
    ISolidPtr Solid;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    IFeaturesPtr GetFeatures ( );
    IReferencesPtr CreateReferences ( );
    IReferencePtr SelectObjectByName (
        _bstr_t Name );
    IReferencePtr SelectBrepByName (
        _bstr_t Name );
    IReferencePtr SelectPlaneByAxis (
        double ox,
        double oy,
        double oz,
        double xx,
        double xy,
        double xz,
        double yx,
        double yy,
        double yz );
    IReferencePtr SelectCurveBy3Points (
        double startX,
        double startY,
        double startz,
        double endX,
        double endY,
        double endz,
        double curvex,
        double curvey,
        double curvez );
    IReferencePtr SelectFeatureByName (
        _bstr_t Name );
    IReferencePtr SelectCurveByPoint (
        double curvex,
        double curvey,
        double curvez );
    HRESULT set_Name (
        _bstr_t pVal );
    HRESULT set_ParentName (
        _bstr_t pVal );
    _bstr_t get_ParentName ( );
    HRESULT LoadFromFile (
        _bstr_t Name );
    VARIANT_BOOL IsBrepPart ( );
    IReferencePtr SelectSketchSegmentByName (
        _bstr_t Name );
    ISolidPtr GetSolid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Features (
        /*[out,retval]*/ struct IFeatures * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateReferences (
        /*[out,retval]*/ struct IReferences * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SelectObjectByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SelectBrepByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SelectPlaneByAxis (
        /*[in]*/ double ox,
        /*[in]*/ double oy,
        /*[in]*/ double oz,
        /*[in]*/ double xx,
        /*[in]*/ double xy,
        /*[in]*/ double xz,
        /*[in]*/ double yx,
        /*[in]*/ double yy,
        /*[in]*/ double yz,
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SelectCurveBy3Points (
        /*[in]*/ double startX,
        /*[in]*/ double startY,
        /*[in]*/ double startz,
        /*[in]*/ double endX,
        /*[in]*/ double endY,
        /*[in]*/ double endz,
        /*[in]*/ double curvex,
        /*[in]*/ double curvey,
        /*[in]*/ double curvez,
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SelectFeatureByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SelectCurveByPoint (
        /*[in]*/ double curvex,
        /*[in]*/ double curvey,
        /*[in]*/ double curvez,
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_set_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_set_ParentName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_get_ParentName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_IsBrepPart (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SelectSketchSegmentByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Solid (
        /*[out,retval]*/ struct ISolid * * ppVal ) = 0;
};

struct __declspec(uuid("47b8d6ab-475c-4102-af1a-6962a7796c3a"))
IComp : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT set_Name (
        _bstr_t pVal );
    HRESULT set_ParentName (
        _bstr_t pVal );
    _bstr_t get_Name ( );
    _bstr_t get_ParentName ( );
    IPartPtr GetPart (
        int i );
    ICompPtr GetComponent (
        int i );
    HRESULT IsComponent (
        int i,
        VARIANT_BOOL * pVal );
    HRESULT IsPart (
        int i,
        VARIANT_BOOL * pVal );
    HRESULT AddPart (
        struct IPart * pVal );
    HRESULT AddComponent (
        struct IComp * pVal );
    int GetSize ( );
    HRESULT GetPlacement (
        double * ox,
        double * oy,
        double * oz,
        double * xx,
        double * xy,
        double * xz,
        double * yx,
        double * yy,
        double * yz );
    HRESULT SetPlacement (
        double ox,
        double oy,
        double oz,
        double zx,
        double zy,
        double zz,
        double xx,
        double xy,
        double xz );
    HRESULT SaveAsMesh (
        int i,
        _bstr_t Name );
    IPartPtr CreatePart (
        _bstr_t Name );
    IPartPtr ImportPartFromXML (
        _bstr_t Path,
        struct IPart * pVal );
    HRESULT SetPartPlacement (
        struct IPart * pVal,
        double ox,
        double oy,
        double oz,
        double zx,
        double zy,
        double zz,
        double xx,
        double xy,
        double xz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_set_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_set_ParentName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_get_ParentName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPart (
        /*[in]*/ int i,
        /*[out,retval]*/ struct IPart * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponent (
        /*[in]*/ int i,
        /*[out,retval]*/ struct IComp * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IsComponent (
        /*[in]*/ int i,
        VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPart (
        /*[in]*/ int i,
        VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddPart (
        /*[in]*/ struct IPart * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddComponent (
        /*[in]*/ struct IComp * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSize (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPlacement (
        /*[out]*/ double * ox,
        /*[out]*/ double * oy,
        /*[out]*/ double * oz,
        /*[out]*/ double * xx,
        /*[out]*/ double * xy,
        /*[out]*/ double * xz,
        /*[out]*/ double * yx,
        /*[out]*/ double * yy,
        /*[out]*/ double * yz ) = 0;
      virtual HRESULT __stdcall raw_SetPlacement (
        /*[in]*/ double ox,
        /*[in]*/ double oy,
        /*[in]*/ double oz,
        /*[in]*/ double zx,
        /*[in]*/ double zy,
        /*[in]*/ double zz,
        /*[in]*/ double xx,
        /*[in]*/ double xy,
        /*[in]*/ double xz ) = 0;
      virtual HRESULT __stdcall raw_SaveAsMesh (
        /*[in]*/ int i,
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_CreatePart (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IPart * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ImportPartFromXML (
        /*[in]*/ BSTR Path,
        /*[in]*/ struct IPart * pVal,
        /*[out,retval]*/ struct IPart * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetPartPlacement (
        /*[in]*/ struct IPart * pVal,
        /*[in]*/ double ox,
        /*[in]*/ double oy,
        /*[in]*/ double oz,
        /*[in]*/ double zx,
        /*[in]*/ double zy,
        /*[in]*/ double zz,
        /*[in]*/ double xx,
        /*[in]*/ double xy,
        /*[in]*/ double xz ) = 0;
};

struct __declspec(uuid("f5074ba1-513a-4f33-9091-cc8cf56daab1"))
IStdAssemConstraintCoaxial : IStdAssemConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetConstrainedPart))
    IPartPtr ConstrainedPart;
    __declspec(property(get=GetConstrainedGeometry))
    IReferencePtr ConstrainedGeometry;
    __declspec(property(get=GetReferencePart))
    IPartPtr ReferencePart;
    __declspec(property(get=GetReferenceGeometry))
    IReferencePtr ReferenceGeometry;

    //
    // Wrapper methods for error-handling
    //

    IPartPtr GetConstrainedPart ( );
    IReferencePtr GetConstrainedGeometry ( );
    IPartPtr GetReferencePart ( );
    IReferencePtr GetReferenceGeometry ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstrainedPart (
        /*[out,retval]*/ struct IPart * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedGeometry (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePart (
        /*[out,retval]*/ struct IPart * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceGeometry (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
};

struct __declspec(uuid("449f2c9c-fa8e-43a1-b332-afad30360c60"))
IStdAssemConstraintIncidence : IStdAssemConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetConstrainedPart))
    IPartPtr ConstrainedPart;
    __declspec(property(get=GetConstrainedGeometry))
    IReferencePtr ConstrainedGeometry;
    __declspec(property(get=GetReferencePart))
    IPartPtr ReferencePart;
    __declspec(property(get=GetReferenceGeometry))
    IReferencePtr ReferenceGeometry;

    //
    // Wrapper methods for error-handling
    //

    IPartPtr GetConstrainedPart ( );
    IReferencePtr GetConstrainedGeometry ( );
    IPartPtr GetReferencePart ( );
    IReferencePtr GetReferenceGeometry ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstrainedPart (
        /*[out,retval]*/ struct IPart * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConstrainedGeometry (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferencePart (
        /*[out,retval]*/ struct IPart * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceGeometry (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
};

struct __declspec(uuid("4ab8ed74-3b2f-47ab-b081-d676c2c45ae8"))
IStdAssemConstraints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetConstraint))
    IStdAssemConstraintPtr Constraint[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IStdAssemConstraintPtr GetConstraint (
        long index );
    IStdAssemConstraintPtr SelectConstraintByName (
        _bstr_t Name );
    IStdAssemConstraintCoaxialPtr AddNewAssemblyCoaxialConstraint (
        _bstr_t Name,
        struct IPart * pConstrainedPart,
        struct IReference * pConstrainedGeometry,
        struct IPart * pReferencePart,
        struct IReference * pReferenceGeometry );
    IStdAssemConstraintIncidencePtr AddNewAssemblyIncidenceConstraint (
        _bstr_t Name,
        struct IPart * pConstrainedPart,
        struct IReference * pConstrainedGeometry,
        struct IPart * pReferencePart,
        struct IReference * pReferenceGeometry,
        enum StdAssemblyIncidenceType incidenceType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IStdAssemConstraint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SelectConstraintByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IStdAssemConstraint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewAssemblyCoaxialConstraint (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IPart * pConstrainedPart,
        /*[in]*/ struct IReference * pConstrainedGeometry,
        /*[in]*/ struct IPart * pReferencePart,
        /*[in]*/ struct IReference * pReferenceGeometry,
        /*[out,retval]*/ struct IStdAssemConstraintCoaxial * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewAssemblyIncidenceConstraint (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IPart * pConstrainedPart,
        /*[in]*/ struct IReference * pConstrainedGeometry,
        /*[in]*/ struct IPart * pReferencePart,
        /*[in]*/ struct IReference * pReferenceGeometry,
        /*[in]*/ enum StdAssemblyIncidenceType incidenceType,
        /*[out,retval]*/ struct IStdAssemConstraintIncidence * * ppVal ) = 0;
};

struct __declspec(uuid("ad55f898-5cf6-4d13-97db-feab1156626f"))
IAssem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetConstraints))
    IStdAssemConstraintsPtr Constraints;

    //
    // Wrapper methods for error-handling
    //

    IPartPtr CreatePart ( );
    ICompPtr CreateComponent ( );
    HRESULT AddComponent (
        struct IComp * pVal );
    ICompPtr GetComponent (
        int index );
    int GetSize ( );
    _bstr_t GetName ( );
    IStdAssemConstraintsPtr GetConstraints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreatePart (
        /*[out,retval]*/ struct IPart * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateComponent (
        /*[out,retval]*/ struct IComp * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddComponent (
        /*[in]*/ struct IComp * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetComponent (
        /*[in]*/ int index,
        /*[out,retval]*/ struct IComp * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetSize (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Constraints (
        /*[out,retval]*/ struct IStdAssemConstraints * * ppVal ) = 0;
};

struct __declspec(uuid("1ee2b408-02ce-4e5f-bffc-b793bac322c1"))
IAssemDocument : IDoc
{
    //
    // Property data
    //

    __declspec(property(get=GetAssem))
    IAssemPtr Assem;

    //
    // Wrapper methods for error-handling
    //

    IAssemPtr GetAssem ( );
    HRESULT Update ( );
    HRESULT test ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Assem (
        /*[out,retval]*/ struct IAssem * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_test ( ) = 0;
};

struct __declspec(uuid("8084c085-5f3f-49f0-b82c-2276f12c88ab"))
IFeatures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IFeaturePtr Item[];
    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IFeaturePtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );
    IStdSketchFeaturePtr AddNewSketchFeature (
        _bstr_t Name,
        struct IReference * pSketchPlane );
    IStdSolidProtrusionExtrudeFeaturePtr AddNewSolidProtrusionExtrudeFeature (
        _bstr_t Name,
        struct IReference * pProfileSketch,
        double StartDepth,
        enum StdExtrudeEndType StartCondition,
        double EndDepth,
        enum StdExtrudeEndType EndCondition,
        VARIANT_BOOL IsFlip );
    IStdSolidCutExtrudeFeaturePtr AddNewSolidCutExtrudeFeature (
        _bstr_t Name,
        struct IReference * pProfileSketch,
        double StartDepth,
        enum StdExtrudeEndType StartCondition,
        double EndDepth,
        enum StdExtrudeEndType EndCondition,
        VARIANT_BOOL IsFlip );
    IStdSolidFilletConstantFeaturePtr AddNewSolidFilletConstantFeature (
        _bstr_t Name,
        struct IReferences * pfilletEdges,
        double Radius,
        enum PropagationType Propagation );
    IStdSolidChamferFeaturePtr AddNewSolidChamferFeature (
        _bstr_t Name,
        struct IReferences * pSelectedEdges,
        double Length );
    IStdSolidProtrusionSweepFeaturePtr AddNewSolidProtrusionSweepFeature (
        _bstr_t Name,
        struct IReference * pProfileSketch,
        struct IReference * pGuideCurve );
    IStdSolidProtrusionRevolveFeaturePtr AddNewSolidProtrusionRevolveFeature (
        _bstr_t Name,
        struct IReference * pProfileSketch,
        double StartAngle,
        enum StdRevolveEndType StartCondition,
        double EndAngle,
        enum StdRevolveEndType EndCondition,
        VARIANT_BOOL IsFlip );
    IStdSolidCutRevolveFeaturePtr AddNewSolidCutRevolveFeature (
        _bstr_t Name,
        struct IReference * pProfileSketch,
        double StartAngle,
        enum StdRevolveEndType StartCondition,
        double EndAngle,
        enum StdRevolveEndType EndCondition,
        VARIANT_BOOL IsFlip );
    IStdSolidOperatePatternRectangularFeaturePtr AddNewSolidOperatePatternRectangularFeature (
        _bstr_t Name,
        struct IReferences * pTargetFeatures,
        double ColumnSpacing,
        double colDirX,
        double colDirY,
        double colDirZ,
        int ColumnNumber,
        double RowSpacing,
        double rowDirX,
        double rowDirY,
        double rowDirZ,
        int RowNumber );
    IStdSolidOperatePatternCircularFeaturePtr AddNewSolidOperatePatternCircularFeature (
        _bstr_t Name,
        struct IReferences * pTargetFeatures,
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2,
        int AngleNumber,
        double AngleIncrement,
        int RadialNumber,
        double RadialSpacing,
        VARIANT_BOOL radialAlignment );
    IStdSolidHoleCounterboredFeaturePtr AddNewSolidHoleCounterboredFeature (
        _bstr_t Name,
        struct IReference * pTargetFace,
        double cx,
        double cy,
        double cz,
        double StartRadius,
        double StartDepth,
        double EndRadius,
        double EndDepth,
        double Angle );
    IStdSolidHoleCountersunkFeaturePtr AddNewSolidHoleCountersunkFeature (
        _bstr_t Name,
        struct IReference * pTargetFace,
        double cx,
        double cy,
        double cz,
        double Radius,
        double Depth,
        double SinkRadius,
        double SinkAngle,
        double BottomAngle );
    IStdDatumPlaneOffsetFeaturePtr AddNewDatumPlaneOffsetFeature (
        _bstr_t Name,
        struct IReference * pSelectedPlane,
        double Distance,
        VARIANT_BOOL IsFlip );
    IStdDatumPlaneOffsetFeaturePtr AddNewDatumPlaneOffsetFeature2 (
        _bstr_t Name,
        double ox,
        double oy,
        double oz,
        double xx,
        double xy,
        double xz,
        double yx,
        double yy,
        double yz,
        VARIANT_BOOL IsFlip );
    IStdSolidLoftFacesFeaturePtr AddNewSolidLoftFacesFeature (
        _bstr_t Name,
        struct IReference * pFace1,
        double Param1,
        struct IReference * pFace2,
        double Param2 );
    IStdSolidLoftSectionsFeaturePtr AddNewSolidLoftSectionsFeature (
        _bstr_t Name,
        struct IReferences * pLoftSections,
        VARIANT_BOOL IsCut );
    IStdSolidCutSweepFeaturePtr AddNewSolidCutSweepFeature (
        _bstr_t Name,
        struct IReference * pProfileSketch,
        struct IReference * pGuideCurve );
    IStdSolidHoleSimpleFeaturePtr AddNewSolidHoleSimpleFeature (
        _bstr_t Name,
        struct IReference * pTargetFace,
        double cx,
        double cy,
        double cz,
        double Radius,
        double Depth );
    IStdSolidShellFeaturePtr AddNewSolidShellFeature (
        _bstr_t Name,
        struct IReferences * pTargetFaces,
        double InnerThickness,
        double OuterThickness );
    IStdSolidRevolveWithExternalAxisFeaturePtr AddNewSolidRevolveWithExternalAxisFeature (
        _bstr_t Name,
        struct IReference * pProfileSketch,
        double StartAngle,
        enum StdRevolveEndType StartCondition,
        double EndAngle,
        enum StdRevolveEndType EndCondition,
        double orgX,
        double orgY,
        double orgZ,
        double dirX,
        double dirY,
        double dirZ,
        VARIANT_BOOL IsCut,
        VARIANT_BOOL IsFlip );
    HRESULT Delete (
        long index );
    HRESULT DeleteByName (
        _bstr_t Name );
    IStdSolidDraftFeaturePtr AddNewSolidDraftFeature (
        _bstr_t Name,
        struct IReferences * pTargetFaces,
        double orgX,
        double orgY,
        double orgZ,
        double dirX,
        double dirY,
        double dirZ,
        double DraftAngle );
    IStdSolidOffsetFeaturePtr AddNewSolidOffsetFeature (
        _bstr_t Name,
        struct IReferences * pTargetFaces,
        double OffsetThickness );
    IStdSolidImportedBrepFeaturePtr AddNewSolidImportedBrepFeature (
        _bstr_t Name,
        _bstr_t FilePath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_AddNewSketchFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pSketchPlane,
        /*[out,retval]*/ struct IStdSketchFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidProtrusionExtrudeFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pProfileSketch,
        /*[in]*/ double StartDepth,
        /*[in]*/ enum StdExtrudeEndType StartCondition,
        /*[in]*/ double EndDepth,
        /*[in]*/ enum StdExtrudeEndType EndCondition,
        /*[in]*/ VARIANT_BOOL IsFlip,
        /*[out,retval]*/ struct IStdSolidProtrusionExtrudeFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidCutExtrudeFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pProfileSketch,
        /*[in]*/ double StartDepth,
        /*[in]*/ enum StdExtrudeEndType StartCondition,
        /*[in]*/ double EndDepth,
        /*[in]*/ enum StdExtrudeEndType EndCondition,
        /*[in]*/ VARIANT_BOOL IsFlip,
        /*[out,retval]*/ struct IStdSolidCutExtrudeFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidFilletConstantFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReferences * pfilletEdges,
        /*[in]*/ double Radius,
        /*[in]*/ enum PropagationType Propagation,
        /*[out,retval]*/ struct IStdSolidFilletConstantFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidChamferFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReferences * pSelectedEdges,
        /*[in]*/ double Length,
        /*[out,retval]*/ struct IStdSolidChamferFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidProtrusionSweepFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pProfileSketch,
        /*[in]*/ struct IReference * pGuideCurve,
        /*[out,retval]*/ struct IStdSolidProtrusionSweepFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidProtrusionRevolveFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pProfileSketch,
        /*[in]*/ double StartAngle,
        /*[in]*/ enum StdRevolveEndType StartCondition,
        /*[in]*/ double EndAngle,
        /*[in]*/ enum StdRevolveEndType EndCondition,
        /*[in]*/ VARIANT_BOOL IsFlip,
        /*[out,retval]*/ struct IStdSolidProtrusionRevolveFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidCutRevolveFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pProfileSketch,
        /*[in]*/ double StartAngle,
        /*[in]*/ enum StdRevolveEndType StartCondition,
        /*[in]*/ double EndAngle,
        /*[in]*/ enum StdRevolveEndType EndCondition,
        /*[in]*/ VARIANT_BOOL IsFlip,
        /*[out,retval]*/ struct IStdSolidCutRevolveFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidOperatePatternRectangularFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReferences * pTargetFeatures,
        /*[in]*/ double ColumnSpacing,
        /*[in]*/ double colDirX,
        /*[in]*/ double colDirY,
        /*[in]*/ double colDirZ,
        /*[in]*/ int ColumnNumber,
        /*[in]*/ double RowSpacing,
        /*[in]*/ double rowDirX,
        /*[in]*/ double rowDirY,
        /*[in]*/ double rowDirZ,
        /*[in]*/ int RowNumber,
        /*[out,retval]*/ struct IStdSolidOperatePatternRectangularFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidOperatePatternCircularFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReferences * pTargetFeatures,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ int AngleNumber,
        /*[in]*/ double AngleIncrement,
        /*[in]*/ int RadialNumber,
        /*[in]*/ double RadialSpacing,
        /*[in]*/ VARIANT_BOOL radialAlignment,
        /*[out,retval]*/ struct IStdSolidOperatePatternCircularFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidHoleCounterboredFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pTargetFace,
        /*[in]*/ double cx,
        /*[in]*/ double cy,
        /*[in]*/ double cz,
        /*[in]*/ double StartRadius,
        /*[in]*/ double StartDepth,
        /*[in]*/ double EndRadius,
        /*[in]*/ double EndDepth,
        /*[in]*/ double Angle,
        /*[out,retval]*/ struct IStdSolidHoleCounterboredFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidHoleCountersunkFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pTargetFace,
        /*[in]*/ double cx,
        /*[in]*/ double cy,
        /*[in]*/ double cz,
        /*[in]*/ double Radius,
        /*[in]*/ double Depth,
        /*[in]*/ double SinkRadius,
        /*[in]*/ double SinkAngle,
        /*[in]*/ double BottomAngle,
        /*[out,retval]*/ struct IStdSolidHoleCountersunkFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewDatumPlaneOffsetFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pSelectedPlane,
        /*[in]*/ double Distance,
        /*[in]*/ VARIANT_BOOL IsFlip,
        /*[out,retval]*/ struct IStdDatumPlaneOffsetFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewDatumPlaneOffsetFeature2 (
        /*[in]*/ BSTR Name,
        /*[in]*/ double ox,
        /*[in]*/ double oy,
        /*[in]*/ double oz,
        /*[in]*/ double xx,
        /*[in]*/ double xy,
        /*[in]*/ double xz,
        /*[in]*/ double yx,
        /*[in]*/ double yy,
        /*[in]*/ double yz,
        /*[in]*/ VARIANT_BOOL IsFlip,
        /*[out,retval]*/ struct IStdDatumPlaneOffsetFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidLoftFacesFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pFace1,
        /*[in]*/ double Param1,
        /*[in]*/ struct IReference * pFace2,
        /*[in]*/ double Param2,
        /*[out,retval]*/ struct IStdSolidLoftFacesFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidLoftSectionsFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReferences * pLoftSections,
        /*[in]*/ VARIANT_BOOL IsCut,
        /*[out,retval]*/ struct IStdSolidLoftSectionsFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidCutSweepFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pProfileSketch,
        /*[in]*/ struct IReference * pGuideCurve,
        /*[out,retval]*/ struct IStdSolidCutSweepFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidHoleSimpleFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pTargetFace,
        /*[in]*/ double cx,
        /*[in]*/ double cy,
        /*[in]*/ double cz,
        /*[in]*/ double Radius,
        /*[in]*/ double Depth,
        /*[out,retval]*/ struct IStdSolidHoleSimpleFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidShellFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReferences * pTargetFaces,
        /*[in]*/ double InnerThickness,
        /*[in]*/ double OuterThickness,
        /*[out,retval]*/ struct IStdSolidShellFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidRevolveWithExternalAxisFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pProfileSketch,
        /*[in]*/ double StartAngle,
        /*[in]*/ enum StdRevolveEndType StartCondition,
        /*[in]*/ double EndAngle,
        /*[in]*/ enum StdRevolveEndType EndCondition,
        /*[in]*/ double orgX,
        /*[in]*/ double orgY,
        /*[in]*/ double orgZ,
        /*[in]*/ double dirX,
        /*[in]*/ double dirY,
        /*[in]*/ double dirZ,
        /*[in]*/ VARIANT_BOOL IsCut,
        /*[in]*/ VARIANT_BOOL IsFlip,
        /*[out,retval]*/ struct IStdSolidRevolveWithExternalAxisFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_DeleteByName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidDraftFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReferences * pTargetFaces,
        /*[in]*/ double orgX,
        /*[in]*/ double orgY,
        /*[in]*/ double orgZ,
        /*[in]*/ double dirX,
        /*[in]*/ double dirY,
        /*[in]*/ double dirZ,
        /*[in]*/ double DraftAngle,
        /*[out,retval]*/ struct IStdSolidDraftFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidOffsetFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReferences * pTargetFaces,
        /*[in]*/ double OffsetThickness,
        /*[out,retval]*/ struct IStdSolidOffsetFeature * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNewSolidImportedBrepFeature (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR FilePath,
        /*[out,retval]*/ struct IStdSolidImportedBrepFeature * * ppVal ) = 0;
};

struct __declspec(uuid("54a6f7f9-5c98-4c65-96d5-bd43d248b788"))
IStdSketchFeature : IFeature
{
    //
    // Property data
    //

    __declspec(property(get=GetOrigin))
    IStdSketchOriginPtr Origin;
    __declspec(property(get=GetHDirection))
    IStdSketchHDirectionPtr HDirection;
    __declspec(property(get=GetVDirection))
    IStdSketchVDirectionPtr VDirection;
    __declspec(property(get=GetGeometries))
    IStdSketchGeometriesPtr Geometries;
    __declspec(property(get=GetConstraints))
    IStdSketchConstraintsPtr Constraints;
    __declspec(property(get=GetSketch))
    ISketchPtr Sketch;
    __declspec(property(get=GetSketchPlane))
    IReferencePtr SketchPlane;
    __declspec(property(get=GetIsInversed))
    VARIANT_BOOL IsInversed;

    //
    // Wrapper methods for error-handling
    //

    IStdSketchOriginPtr GetOrigin ( );
    IStdSketchHDirectionPtr GetHDirection ( );
    IStdSketchVDirectionPtr GetVDirection ( );
    IStdSketchGeometriesPtr GetGeometries ( );
    IStdSketchConstraintsPtr GetConstraints ( );
    ISketchPtr GetSketch ( );
    IReferencePtr GetSketchPlane ( );
    VARIANT_BOOL GetIsInversed ( );
    ISketchEditorPtr OpenEditor ( );
    ISketchEditorPtr OpenEditorEx (
        VARIANT_BOOL activateDcm );
    HRESULT SetCoordinateSystem (
        double ox,
        double oy,
        double oz,
        double xx,
        double xy,
        double xz,
        double yx,
        double yy,
        double yz );
    HRESULT GetCoordinateSystem (
        double * ox,
        double * oy,
        double * oz,
        double * xx,
        double * xy,
        double * xz,
        double * yx,
        double * yy,
        double * yz );
    HRESULT DeleteByName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Origin (
        /*[out,retval]*/ struct IStdSketchOrigin * * ppVal ) = 0;
      virtual HRESULT __stdcall get_HDirection (
        /*[out,retval]*/ struct IStdSketchHDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VDirection (
        /*[out,retval]*/ struct IStdSketchVDirection * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Geometries (
        /*[out,retval]*/ struct IStdSketchGeometries * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Constraints (
        /*[out,retval]*/ struct IStdSketchConstraints * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct ISketch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SketchPlane (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsInversed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenEditor (
        /*[out,retval]*/ struct ISketchEditor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_OpenEditorEx (
        /*[in]*/ VARIANT_BOOL activateDcm,
        /*[out,retval]*/ struct ISketchEditor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetCoordinateSystem (
        /*[in]*/ double ox,
        /*[in]*/ double oy,
        /*[in]*/ double oz,
        /*[in]*/ double xx,
        /*[in]*/ double xy,
        /*[in]*/ double xz,
        /*[in]*/ double yx,
        /*[in]*/ double yy,
        /*[in]*/ double yz ) = 0;
      virtual HRESULT __stdcall raw_GetCoordinateSystem (
        /*[out]*/ double * ox,
        /*[out]*/ double * oy,
        /*[out]*/ double * oz,
        /*[out]*/ double * xx,
        /*[out]*/ double * xy,
        /*[out]*/ double * xz,
        /*[out]*/ double * yx,
        /*[out]*/ double * yy,
        /*[out]*/ double * yz ) = 0;
      virtual HRESULT __stdcall raw_DeleteByName (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("1804c402-fbaf-438f-b849-ab6940606e6d"))
IStdSketchOrigin : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSketchFeature))
    IStdSketchFeaturePtr SketchFeature;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    IStdSketchFeaturePtr GetSketchFeature ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SketchFeature (
        /*[out,retval]*/ struct IStdSketchFeature * * ppVal ) = 0;
};

struct __declspec(uuid("5a732443-2a35-4519-9c1a-5c9e25342d22"))
IStdSketchHDirection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSketchFeature))
    IStdSketchFeaturePtr SketchFeature;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    IStdSketchFeaturePtr GetSketchFeature ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SketchFeature (
        /*[out,retval]*/ struct IStdSketchFeature * * ppVal ) = 0;
};

struct __declspec(uuid("1c5fdd6c-3075-4a54-9e08-d959769c24c6"))
IStdSketchVDirection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSketchFeature))
    IStdSketchFeaturePtr SketchFeature;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    IStdSketchFeaturePtr GetSketchFeature ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SketchFeature (
        /*[out,retval]*/ struct IStdSketchFeature * * ppVal ) = 0;
};

struct __declspec(uuid("882df9bc-ff59-4e65-8e7b-0bcad3d4150f"))
IStdSketchGeometry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum StdSketchGeometryType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSketchFeature))
    IStdSketchFeaturePtr SketchFeature;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum StdSketchGeometryType GetType ( );
    _bstr_t GetName ( );
    IStdSketchFeaturePtr GetSketchFeature ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum StdSketchGeometryType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SketchFeature (
        /*[out,retval]*/ struct IStdSketchFeature * * ppVal ) = 0;
};

struct __declspec(uuid("7ffe9084-7c7b-4e75-abf6-c21a1281e279"))
IStdSketchGeometries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IStdSketchGeometryPtr Item[];
    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFindByName))
    IStdSketchGeometryPtr FindByName;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IStdSketchGeometryPtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );
    IStdSketchGeometryPtr GetFindByName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IStdSketchGeometry * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall get_FindByName (
        /*[out,retval]*/ struct IStdSketchGeometry * * ppVal ) = 0;
};

struct __declspec(uuid("23057881-19b6-4395-9d39-b5b62f75b5ef"))
IStdSketchConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum StdSketchConstraintType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSketchFeature))
    IStdSketchFeaturePtr SketchFeature;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum StdSketchConstraintType GetType ( );
    _bstr_t GetName ( );
    IStdSketchFeaturePtr GetSketchFeature ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum StdSketchConstraintType * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SketchFeature (
        /*[out,retval]*/ struct IStdSketchFeature * * ppVal ) = 0;
};

struct __declspec(uuid("82dd5568-c7f7-4647-b815-66d4e72d5738"))
IStdSketchConstraints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IStdSketchConstraintPtr Item[];
    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFindByName))
    IStdSketchConstraintPtr FindByName;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IStdSketchConstraintPtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );
    IStdSketchConstraintPtr GetFindByName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IStdSketchConstraint * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall get_FindByName (
        /*[out,retval]*/ struct IStdSketchConstraint * * ppVal ) = 0;
};

struct __declspec(uuid("3966e6f5-ec21-413e-b0ea-af5077205967"))
IStdSketchControlPoint : IStdSketchGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("ee1eb2ea-dfa3-42a5-a9cb-321fc40b04dc"))
IStdSketchLine : IStdSketchGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint))
    IStdSketchControlPointPtr StartPoint;
    __declspec(property(get=GetEndPoint))
    IStdSketchControlPointPtr EndPoint;

    //
    // Wrapper methods for error-handling
    //

    IStdSketchControlPointPtr GetStartPoint ( );
    IStdSketchControlPointPtr GetEndPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ struct IStdSketchControlPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IStdSketchControlPoint * * ppVal ) = 0;
};

struct __declspec(uuid("c10c6fdd-8b99-4449-82f1-eae67407ce67"))
IStdSketchCircle : IStdSketchGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetCenterPoint))
    IStdSketchControlPointPtr CenterPoint;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    IStdSketchControlPointPtr GetCenterPoint ( );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CenterPoint (
        /*[out,retval]*/ struct IStdSketchControlPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("ef6bf49c-742c-4c57-8a37-cecfe279db97"))
IStdSketchCircularArc : IStdSketchGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetCenterPoint))
    IStdSketchControlPointPtr CenterPoint;
    __declspec(property(get=GetStartPoint))
    IStdSketchControlPointPtr StartPoint;
    __declspec(property(get=GetEndPoint))
    IStdSketchControlPointPtr EndPoint;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetStartAngle))
    double StartAngle;
    __declspec(property(get=GetEndAngle))
    double EndAngle;

    //
    // Wrapper methods for error-handling
    //

    IStdSketchControlPointPtr GetCenterPoint ( );
    IStdSketchControlPointPtr GetStartPoint ( );
    IStdSketchControlPointPtr GetEndPoint ( );
    double GetRadius ( );
    double GetStartAngle ( );
    double GetEndAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CenterPoint (
        /*[out,retval]*/ struct IStdSketchControlPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ struct IStdSketchControlPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IStdSketchControlPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_EndAngle (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("16103c6e-b6d1-4f7c-bda8-e6cf5112accd"))
IStdSketchCoincidentSamePoints : IStdSketchConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetFirstObject))
    IReferencePtr FirstObject;
    __declspec(property(get=GetFirstType))
    enum StdCoincidentSamePointsType FirstType;
    __declspec(property(get=GetSecondObject))
    IReferencePtr SecondObject;
    __declspec(property(get=GetSecondType))
    enum StdCoincidentSamePointsType SecondType;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetFirstObject ( );
    enum StdCoincidentSamePointsType GetFirstType ( );
    IReferencePtr GetSecondObject ( );
    enum StdCoincidentSamePointsType GetSecondType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FirstObject (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FirstType (
        /*[out,retval]*/ enum StdCoincidentSamePointsType * pVal ) = 0;
      virtual HRESULT __stdcall get_SecondObject (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SecondType (
        /*[out,retval]*/ enum StdCoincidentSamePointsType * pVal ) = 0;
};

struct __declspec(uuid("ff3a0bdd-1aa5-48fa-9f40-228a00c64a47"))
IStdSketchPerpendicular : IStdSketchConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceEdit))
    IReferencePtr ReferenceEdit;
    __declspec(property(get=GetTarget))
    IReferencePtr Target;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetReferenceEdit ( );
    IReferencePtr GetTarget ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceEdit (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
};

struct __declspec(uuid("aba27711-124a-47c3-bb88-3d2703f87984"))
IStdSketchParallel : IStdSketchConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetReferenceEdit))
    IReferencePtr ReferenceEdit;
    __declspec(property(get=GetTarget))
    IReferencePtr Target;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetReferenceEdit ( );
    IReferencePtr GetTarget ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReferenceEdit (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
};

struct __declspec(uuid("3c500269-634e-4018-9598-916c7035ccaa"))
IStdSketchHorizontal : IStdSketchConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetTarget))
    IReferencePtr Target;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetTarget ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
};

struct __declspec(uuid("07f4ba82-aa63-4c00-b640-0d00044fb2dc"))
IStdSketchVertical : IStdSketchConstraint
{
    //
    // Property data
    //

    __declspec(property(get=GetTarget))
    IReferencePtr Target;

    //
    // Wrapper methods for error-handling
    //

    IReferencePtr GetTarget ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ struct IReference * * ppVal ) = 0;
};

struct __declspec(uuid("57fae9e3-f8d4-49b2-ab0a-b88f640b7cf2"))
ISketchEditor : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Close ( );
    IStdSketchLinePtr Create2DLine2Points (
        _bstr_t Name,
        double startX,
        double startY,
        double endX,
        double endY );
    IStdSketchCirclePtr Create2DCircleCenterPoint (
        _bstr_t Name,
        double centerX,
        double centerY,
        double Radius );
    IStdSketchCircularArcPtr Create2DArc (
        _bstr_t Name,
        double centerX,
        double centerY,
        double Radius,
        double StartAngle,
        double EndAngle );
    IStdSketchCircularArcPtr Create2DArcCenterStartEnd (
        _bstr_t Name,
        double centerX,
        double centerY,
        double startX,
        double startY,
        double endX,
        double endY );
    IStdSketchCircularArcPtr Create2DArc3Points (
        _bstr_t Name,
        double startX,
        double startY,
        double intermediateX,
        double intermediateY,
        double endX,
        double endY );
    IStdSketchLinePtr Create2DCenterline2Points (
        _bstr_t Name,
        double startX,
        double startY,
        double endX,
        double endY );
    IStdSketchCoincidentSamePointsPtr CreateCoincidentSamePoints (
        _bstr_t Name,
        struct IReference * pFirstObject,
        enum StdCoincidentSamePointsType FirstType,
        struct IReference * pSecondObject,
        enum StdCoincidentSamePointsType SecondType );
    IStdSketchPerpendicularPtr CreatePerpendicular (
        _bstr_t Name,
        struct IReference * pReferenceEdit,
        struct IReference * pTarget );
    IStdSketchParallelPtr CreateParallel (
        _bstr_t Name,
        struct IReference * pReferenceEdit,
        struct IReference * pTarget );
    IStdSketchHorizontalPtr CreateHorizontal (
        _bstr_t Name,
        struct IReference * pTarget );
    IStdSketchVerticalPtr CreateVertical (
        _bstr_t Name,
        struct IReference * pTarget );
    HRESULT DeleteByName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Create2DLine2Points (
        /*[in]*/ BSTR Name,
        /*[in]*/ double startX,
        /*[in]*/ double startY,
        /*[in]*/ double endX,
        /*[in]*/ double endY,
        /*[out,retval]*/ struct IStdSketchLine * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Create2DCircleCenterPoint (
        /*[in]*/ BSTR Name,
        /*[in]*/ double centerX,
        /*[in]*/ double centerY,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct IStdSketchCircle * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Create2DArc (
        /*[in]*/ BSTR Name,
        /*[in]*/ double centerX,
        /*[in]*/ double centerY,
        /*[in]*/ double Radius,
        /*[in]*/ double StartAngle,
        /*[in]*/ double EndAngle,
        /*[out,retval]*/ struct IStdSketchCircularArc * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Create2DArcCenterStartEnd (
        /*[in]*/ BSTR Name,
        /*[in]*/ double centerX,
        /*[in]*/ double centerY,
        /*[in]*/ double startX,
        /*[in]*/ double startY,
        /*[in]*/ double endX,
        /*[in]*/ double endY,
        /*[out,retval]*/ struct IStdSketchCircularArc * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Create2DArc3Points (
        /*[in]*/ BSTR Name,
        /*[in]*/ double startX,
        /*[in]*/ double startY,
        /*[in]*/ double intermediateX,
        /*[in]*/ double intermediateY,
        /*[in]*/ double endX,
        /*[in]*/ double endY,
        /*[out,retval]*/ struct IStdSketchCircularArc * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Create2DCenterline2Points (
        /*[in]*/ BSTR Name,
        /*[in]*/ double startX,
        /*[in]*/ double startY,
        /*[in]*/ double endX,
        /*[in]*/ double endY,
        /*[out,retval]*/ struct IStdSketchLine * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCoincidentSamePoints (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pFirstObject,
        /*[in]*/ enum StdCoincidentSamePointsType FirstType,
        /*[in]*/ struct IReference * pSecondObject,
        /*[in]*/ enum StdCoincidentSamePointsType SecondType,
        /*[out,retval]*/ struct IStdSketchCoincidentSamePoints * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePerpendicular (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pReferenceEdit,
        /*[in]*/ struct IReference * pTarget,
        /*[out,retval]*/ struct IStdSketchPerpendicular * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParallel (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pReferenceEdit,
        /*[in]*/ struct IReference * pTarget,
        /*[out,retval]*/ struct IStdSketchParallel * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateHorizontal (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pTarget,
        /*[out,retval]*/ struct IStdSketchHorizontal * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVertical (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IReference * pTarget,
        /*[out,retval]*/ struct IStdSketchVertical * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteByName (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("2600ed0f-883f-478a-afda-a7743a1adf3a"))
IStdSketchCenterline : IStdSketchGeometry
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint))
    IStdSketchControlPointPtr StartPoint;
    __declspec(property(get=GetEndPoint))
    IStdSketchControlPointPtr EndPoint;

    //
    // Wrapper methods for error-handling
    //

    IStdSketchControlPointPtr GetStartPoint ( );
    IStdSketchControlPointPtr GetEndPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ struct IStdSketchControlPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IStdSketchControlPoint * * ppVal ) = 0;
};

//
// Wrapper method implementations
//

#include "c:\users\imgyu\documents\00_macro\02_transcat_part_api(c#)\translator_catia\cppwithcsharp\release\transcad.tli"

} // namespace TransCAD

#pragma pack(pop)
